(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    237459,       4689]
NotebookOptionsPosition[    230380,       4571]
NotebookOutlinePosition[    230797,       4587]
CellTagsIndexPosition[    230754,       4584]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["PSB generation and propagation (protocol 1)", "Title",
 CellChangeTimes->{{3.883037569067868*^9, 
  3.883037601346114*^9}},ExpressionUUID->"ab71c4a3-5264-4dcc-aa3f-\
782ba7cd5ae9"],

Cell[CellGroupData[{

Cell["Functions", "Section",
 CellChangeTimes->{{3.8830458104073763`*^9, 
  3.88304581169184*^9}},ExpressionUUID->"cf11b03f-8551-4834-bd56-\
d9346f29b234"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"S2N", "[", "x_", "]"}], ":=", 
  RowBox[{"ToExpression", "[", 
   RowBox[{"StringDrop", "[", 
    RowBox[{
     RowBox[{"ToString", "[", "x", "]"}], ",", "1"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N2S", "[", "y_", "]"}], ":=", 
  RowBox[{"ToExpression", "[", 
   RowBox[{
    RowBox[{"ToString", "[", "x", "]"}], "<>", 
    RowBox[{"ToString", "[", "y", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N2SPP", "[", "x_", "]"}], ":=", 
  RowBox[{"ToExpression", "[", 
   RowBox[{
    RowBox[{"ToString", "[", "p", "]"}], "<>", 
    RowBox[{"ToString", "[", "x", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N2SSE", "[", "x_", "]"}], ":=", 
  RowBox[{"ToExpression", "[", 
   RowBox[{
    RowBox[{"ToString", "[", "s", "]"}], "<>", 
    RowBox[{"ToString", "[", "x", "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"mapS2N", "[", "x_", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{"S2N", ",", "x", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<This might become a slow function but well use it for now\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DeleteSubset", "[", 
   RowBox[{"data_", ",", "sub_"}], "]"}], ":=", 
  RowBox[{"DeleteCases", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Alternatives", "@@", "sub"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8830473117668343`*^9, 3.883047344560664*^9}, {
   3.883048478362365*^9, 3.883048542432181*^9}, 3.883057769627056*^9, {
   3.8830578048072205`*^9, 3.883057814132326*^9}, {3.8832188694691668`*^9, 
   3.8832188702140446`*^9}, {3.883221289443115*^9, 3.883221364950734*^9}, {
   3.883379268026824*^9, 3.883379304523932*^9}, 3.8833902798780656`*^9},
 CellLabel->
  "In[1561]:=",ExpressionUUID->"36c0fa1a-3c4b-49d9-a7fe-e49677f039ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Single IE PSB propagation setup and split", "Section",
 CellChangeTimes->{{3.883045823552136*^9, 3.883045845304715*^9}, {
  3.8833837429774055`*^9, 
  3.883383760341073*^9}},ExpressionUUID->"0da4eeb0-a597-44b4-840c-\
00800a9c2864"],

Cell["\<\
Test for PSB propagation along single IE. Generate expression based SE edges. \
Each expression represents an IG.\
\>", "Text",
 CellChangeTimes->{{3.8830376276593*^9, 3.8830376439892797`*^9}, {
  3.8830391904981227`*^9, 3.88303922054532*^9}, {3.883219235214677*^9, 
  3.8832192398140883`*^9}},ExpressionUUID->"c148d844-cde5-4ad6-ba9e-\
b10302b4c290"],

Cell[CellGroupData[{

Cell["General setup", "Subsection",
 CellChangeTimes->{{3.883046962860532*^9, 3.883046966890711*^9}, {
  3.8832192416087503`*^9, 
  3.8832192427416067`*^9}},ExpressionUUID->"925356f3-acec-497f-934f-\
ec5924c6d55a"],

Cell["\<\
General structure
PP element = {Set of adjacent IGs} (non-directed hyperedge)\[LineSeparator]
SE element = {Set of adjacent IGs (no more than two)} (non-directed edge)
IG element = {{{Set of adjacent PP},{Set of adjacent SE}},{PSB prop set},{PSB \
replicate set}} 

(IGs have an awareness of their nearest neighbours, and some idea of \
direction of propagation of PSB. In the case of topological information \
transfer there will likely be an additional location in the IG element to \
store that topological information.)

\
\>", "Text",
 CellChangeTimes->{{3.883219246898726*^9, 3.883219439107565*^9}, {
   3.8832195727307615`*^9, 3.883219619965351*^9}, 3.8832216735886145`*^9, {
   3.8833902527754836`*^9, 3.883390266071632*^9}, {3.8834882095461383`*^9, 
   3.883488231873293*^9}},ExpressionUUID->"529ec982-8de8-41c7-ba13-\
dfad1abf47c0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\"\<- Define SE number -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEn", "=", "5"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Define a string of SEs in an IE with list of indices -\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"SEset", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"N2S", "[", "i1", "]"}], ",", 
      RowBox[{"N2S", "[", 
       RowBox[{"i1", "+", "1"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i1", ",", "SEn"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- List of indices will be important when running through \
elements for duplications and reductions -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{"SEinSet", "=", 
  RowBox[{"Table", "[", 
   RowBox[{"i1", ",", 
    RowBox[{"{", 
     RowBox[{"i1", ",", "SEn"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Define SE index number -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SEin", "=", 
    RowBox[{"SEn", "+", "1"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Define PP number -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PPn", "=", "2"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Define PP set -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{"PPset", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "x1", "}"}], ",", 
    RowBox[{"{", "x6", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Define PP indices -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{"PPinSet", "=", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2"}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Define PP index number -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PPin", "=", 
    RowBox[{"PPn", "+", "1"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Define IG number -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGn", "=", 
   RowBox[{"SEn", "+", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<- Definie IG index -\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGin", "=", 
   RowBox[{"IGn", "+", "1"}]}], 
  ";"}], "\[IndentingNewLine]", "\"\<- Define information storage for IGs -\>\
\"", "\[IndentingNewLine]", 
 RowBox[{"\"\<Each element has only one array as we are \
\!\(\*StyleBox[\"not\",FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\" \
\",FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\"including\",\
FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\" \
\",FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\"information\",\
FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\" \
\",FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\"propagation\",\
FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\) at this point \
\!\(\*StyleBox[\"only\",FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\" \
\",FontWeight->\"Plain\",
FontVariations->{\"Underline\"->True}]\)\!\(\*StyleBox[\"PSBs\",FontWeight->\"\
Plain\",
FontVariations->{\"Underline\"->True}]\)\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<I believe that in order to correctly decern between the FROM \
and TO sets of a PSB the IG will need to store some information of the local \
connections such as SE and PPs\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGset", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"i1", "\[Equal]", "1"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"N2SPP", "[", "1", "]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"N2SSE", "[", "i1", "]"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"i1", "\[Equal]", "IGn"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"N2SPP", "[", "2", "]"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"N2SSE", "[", "i1", "]"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"N2SSE", "[", "i1", "]"}], ",", 
               RowBox[{"N2SSE", "[", 
                RowBox[{"i1", "+", "1"}], "]"}]}], "}"}]}], "}"}], ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", "}"}]}], "}"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i1", ",", "IGn"}], "}"}]}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<We must have a index list that keeps track of the locations of \
PSBs\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PSBinSet", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "\"\<In the case where we lose SE we must define a SE reduced index set. \
This will be used to save space when duplicating and will be used as storage \
space for new SEs when they duplicate, however at first we will not use this \
since we will not include duplication and reduction, only splitting and PSB \
propagation.\>\"", ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEredIndSet", "=", 
   RowBox[{"{", "}"}]}], 
  ";"}], "\[IndentingNewLine]", "\"\<We must also include a IGlossSet\>\"", "\
\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGlossSet", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<We must also include a PSBlossSet\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PSBlossSet", "=", 
    RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]",
   "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8824194668262815`*^9, 3.8824195015744133`*^9}, {
   3.8830379206182575`*^9, 3.883037985994859*^9}, {3.883038026755659*^9, 
   3.883038057019067*^9}, {3.883038179099033*^9, 3.88303819690051*^9}, {
   3.883042175653984*^9, 3.883042246191955*^9}, {3.8830442992921977`*^9, 
   3.8830443025363274`*^9}, {3.8830454038555984`*^9, 
   3.8830454184370575`*^9}, {3.883045453127579*^9, 3.883045460006749*^9}, {
   3.88304570687996*^9, 3.8830457227281604`*^9}, {3.8830457669537134`*^9, 
   3.8830457698691535`*^9}, {3.883045892625872*^9, 3.8830458929924135`*^9}, {
   3.883045938843857*^9, 3.8830459823140044`*^9}, {3.8830460345881205`*^9, 
   3.8830463499205427`*^9}, {3.883046395253697*^9, 3.883046575891814*^9}, {
   3.8830470813320627`*^9, 3.8830471506650743`*^9}, {3.883047352443331*^9, 
   3.8830473614293423`*^9}, {3.8830569993687153`*^9, 
   3.8830571419744034`*^9}, {3.8830571966016026`*^9, 3.8830572750797763`*^9}, 
   3.8830576803074102`*^9, {3.8830577776593275`*^9, 3.8830577787119484`*^9}, {
   3.8832191234037733`*^9, 3.8832192249550085`*^9}, {3.883219626362337*^9, 
   3.883219747125227*^9}, {3.883219958504434*^9, 3.8832199944297447`*^9}, {
   3.8832213793864594`*^9, 3.8832214263802357`*^9}, {3.8832220308151627`*^9, 
   3.8832220949579244`*^9}, {3.883492585344903*^9, 3.883492592387993*^9}},
 CellLabel->
  "In[1568]:=",ExpressionUUID->"d533d13a-3ec1-499f-9ee4-c7fb2f3c9e13"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "x2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x2", ",", "x3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x3", ",", "x4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x4", ",", "x5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x5", ",", "x6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883042163684002*^9, {3.883042211436954*^9, 3.883042214203782*^9}, 
   3.883045779362011*^9, 3.8830458526885805`*^9, 3.8830459051777678`*^9, {
   3.883045940869322*^9, 3.8830459700948515`*^9}, {3.8830463452396574`*^9, 
   3.8830463520980425`*^9}, 3.8830471614905453`*^9, {3.8830473642224026`*^9, 
   3.883047370884178*^9}, {3.883057675371627*^9, 3.8830576816278543`*^9}, 
   3.883057873180106*^9, 3.8830579240071135`*^9, 3.8830580611544886`*^9, 
   3.8832177336382904`*^9, 3.883217793099225*^9, {3.88321884757168*^9, 
   3.8832188749208317`*^9}, 3.88322001592784*^9, 3.883221431160182*^9, 
   3.88322167635341*^9, 3.8832217674038496`*^9, {3.883221806037462*^9, 
   3.883221826758658*^9}, 3.8832218963949623`*^9, 3.883221945994011*^9, 
   3.8832220963757086`*^9, 3.88322223099936*^9, 3.883373354616295*^9, 
   3.883378624240348*^9, 3.883383671305002*^9, {3.8833838014254384`*^9, 
   3.8833838159971347`*^9}, 3.8833840305964384`*^9, 3.8833854365552588`*^9, 
   3.883386232748217*^9, 3.8833914324016285`*^9, 3.883391594487854*^9, {
   3.8833981338569903`*^9, 3.883398140694837*^9}, 3.8834000133903813`*^9, 
   3.883484944167568*^9, 3.883486782154817*^9, 3.883487453312111*^9, {
   3.8834887484274054`*^9, 3.8834887723284063`*^9}, 3.883492402579826*^9, 
   3.883492483438476*^9, 3.883492522386956*^9, {3.8834926245455494`*^9, 
   3.883492633975663*^9}},
 CellLabel->
  "Out[1571]=",ExpressionUUID->"2bd2399b-0af8-4c26-a8c3-576314fe75e6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellChangeTimes->{
  3.883042163684002*^9, {3.883042211436954*^9, 3.883042214203782*^9}, 
   3.883045779362011*^9, 3.8830458526885805`*^9, 3.8830459051777678`*^9, {
   3.883045940869322*^9, 3.8830459700948515`*^9}, {3.8830463452396574`*^9, 
   3.8830463520980425`*^9}, 3.8830471614905453`*^9, {3.8830473642224026`*^9, 
   3.883047370884178*^9}, {3.883057675371627*^9, 3.8830576816278543`*^9}, 
   3.883057873180106*^9, 3.8830579240071135`*^9, 3.8830580611544886`*^9, 
   3.8832177336382904`*^9, 3.883217793099225*^9, {3.88321884757168*^9, 
   3.8832188749208317`*^9}, 3.88322001592784*^9, 3.883221431160182*^9, 
   3.88322167635341*^9, 3.8832217674038496`*^9, {3.883221806037462*^9, 
   3.883221826758658*^9}, 3.8832218963949623`*^9, 3.883221945994011*^9, 
   3.8832220963757086`*^9, 3.88322223099936*^9, 3.883373354616295*^9, 
   3.883378624240348*^9, 3.883383671305002*^9, {3.8833838014254384`*^9, 
   3.8833838159971347`*^9}, 3.8833840305964384`*^9, 3.8833854365552588`*^9, 
   3.883386232748217*^9, 3.8833914324016285`*^9, 3.883391594487854*^9, {
   3.8833981338569903`*^9, 3.883398140694837*^9}, 3.8834000133903813`*^9, 
   3.883484944167568*^9, 3.883486782154817*^9, 3.883487453312111*^9, {
   3.8834887484274054`*^9, 3.8834887723284063`*^9}, 3.883492402579826*^9, 
   3.883492483438476*^9, 3.883492522386956*^9, {3.8834926245455494`*^9, 
   3.8834926339823747`*^9}},
 CellLabel->
  "Out[1573]=",ExpressionUUID->"13ef0469-bf88-414b-8b67-5d241f797513"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "x1", "}"}], ",", 
   RowBox[{"{", "x6", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883042163684002*^9, {3.883042211436954*^9, 3.883042214203782*^9}, 
   3.883045779362011*^9, 3.8830458526885805`*^9, 3.8830459051777678`*^9, {
   3.883045940869322*^9, 3.8830459700948515`*^9}, {3.8830463452396574`*^9, 
   3.8830463520980425`*^9}, 3.8830471614905453`*^9, {3.8830473642224026`*^9, 
   3.883047370884178*^9}, {3.883057675371627*^9, 3.8830576816278543`*^9}, 
   3.883057873180106*^9, 3.8830579240071135`*^9, 3.8830580611544886`*^9, 
   3.8832177336382904`*^9, 3.883217793099225*^9, {3.88321884757168*^9, 
   3.8832188749208317`*^9}, 3.88322001592784*^9, 3.883221431160182*^9, 
   3.88322167635341*^9, 3.8832217674038496`*^9, {3.883221806037462*^9, 
   3.883221826758658*^9}, 3.8832218963949623`*^9, 3.883221945994011*^9, 
   3.8832220963757086`*^9, 3.88322223099936*^9, 3.883373354616295*^9, 
   3.883378624240348*^9, 3.883383671305002*^9, {3.8833838014254384`*^9, 
   3.8833838159971347`*^9}, 3.8833840305964384`*^9, 3.8833854365552588`*^9, 
   3.883386232748217*^9, 3.8833914324016285`*^9, 3.883391594487854*^9, {
   3.8833981338569903`*^9, 3.883398140694837*^9}, 3.8834000133903813`*^9, 
   3.883484944167568*^9, 3.883486782154817*^9, 3.883487453312111*^9, {
   3.8834887484274054`*^9, 3.8834887723284063`*^9}, 3.883492402579826*^9, 
   3.883492483438476*^9, 3.883492522386956*^9, {3.8834926245455494`*^9, 
   3.8834926339893227`*^9}},
 CellLabel->
  "Out[1579]=",ExpressionUUID->"f181ae65-2298-420c-a7dd-19fff0bf9255"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{
  3.883042163684002*^9, {3.883042211436954*^9, 3.883042214203782*^9}, 
   3.883045779362011*^9, 3.8830458526885805`*^9, 3.8830459051777678`*^9, {
   3.883045940869322*^9, 3.8830459700948515`*^9}, {3.8830463452396574`*^9, 
   3.8830463520980425`*^9}, 3.8830471614905453`*^9, {3.8830473642224026`*^9, 
   3.883047370884178*^9}, {3.883057675371627*^9, 3.8830576816278543`*^9}, 
   3.883057873180106*^9, 3.8830579240071135`*^9, 3.8830580611544886`*^9, 
   3.8832177336382904`*^9, 3.883217793099225*^9, {3.88321884757168*^9, 
   3.8832188749208317`*^9}, 3.88322001592784*^9, 3.883221431160182*^9, 
   3.88322167635341*^9, 3.8832217674038496`*^9, {3.883221806037462*^9, 
   3.883221826758658*^9}, 3.8832218963949623`*^9, 3.883221945994011*^9, 
   3.8832220963757086`*^9, 3.88322223099936*^9, 3.883373354616295*^9, 
   3.883378624240348*^9, 3.883383671305002*^9, {3.8833838014254384`*^9, 
   3.8833838159971347`*^9}, 3.8833840305964384`*^9, 3.8833854365552588`*^9, 
   3.883386232748217*^9, 3.8833914324016285`*^9, 3.883391594487854*^9, {
   3.8833981338569903`*^9, 3.883398140694837*^9}, 3.8834000133903813`*^9, 
   3.883484944167568*^9, 3.883486782154817*^9, 3.883487453312111*^9, {
   3.8834887484274054`*^9, 3.8834887723284063`*^9}, 3.883492402579826*^9, 
   3.883492483438476*^9, 3.883492522386956*^9, {3.8834926245455494`*^9, 
   3.8834926339945374`*^9}},
 CellLabel->
  "Out[1581]=",ExpressionUUID->"b27905d8-5056-4921-8436-6ed09c6aa805"],

Cell[BoxData["\<\"- Define information storage for IGs -\"\>"], "Output",
 CellChangeTimes->{
  3.883042163684002*^9, {3.883042211436954*^9, 3.883042214203782*^9}, 
   3.883045779362011*^9, 3.8830458526885805`*^9, 3.8830459051777678`*^9, {
   3.883045940869322*^9, 3.8830459700948515`*^9}, {3.8830463452396574`*^9, 
   3.8830463520980425`*^9}, 3.8830471614905453`*^9, {3.8830473642224026`*^9, 
   3.883047370884178*^9}, {3.883057675371627*^9, 3.8830576816278543`*^9}, 
   3.883057873180106*^9, 3.8830579240071135`*^9, 3.8830580611544886`*^9, 
   3.8832177336382904`*^9, 3.883217793099225*^9, {3.88321884757168*^9, 
   3.8832188749208317`*^9}, 3.88322001592784*^9, 3.883221431160182*^9, 
   3.88322167635341*^9, 3.8832217674038496`*^9, {3.883221806037462*^9, 
   3.883221826758658*^9}, 3.8832218963949623`*^9, 3.883221945994011*^9, 
   3.8832220963757086`*^9, 3.88322223099936*^9, 3.883373354616295*^9, 
   3.883378624240348*^9, 3.883383671305002*^9, {3.8833838014254384`*^9, 
   3.8833838159971347`*^9}, 3.8833840305964384`*^9, 3.8833854365552588`*^9, 
   3.883386232748217*^9, 3.8833914324016285`*^9, 3.883391594487854*^9, {
   3.8833981338569903`*^9, 3.883398140694837*^9}, 3.8834000133903813`*^9, 
   3.883484944167568*^9, 3.883486782154817*^9, 3.883487453312111*^9, {
   3.8834887484274054`*^9, 3.8834887723284063`*^9}, 3.883492402579826*^9, 
   3.883492483438476*^9, 3.883492522386956*^9, {3.8834926245455494`*^9, 
   3.8834926339985356`*^9}},
 CellLabel->
  "Out[1588]=",ExpressionUUID->"545a56e9-095b-4331-8b67-da8a78f996ae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "p1", "}"}], ",", 
       RowBox[{"{", "s1", "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s2", ",", "s3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s3", ",", "s4"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s4", ",", "s5"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s5", ",", "s6"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "p2", "}"}], ",", 
       RowBox[{"{", "s6", "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883042163684002*^9, {3.883042211436954*^9, 3.883042214203782*^9}, 
   3.883045779362011*^9, 3.8830458526885805`*^9, 3.8830459051777678`*^9, {
   3.883045940869322*^9, 3.8830459700948515`*^9}, {3.8830463452396574`*^9, 
   3.8830463520980425`*^9}, 3.8830471614905453`*^9, {3.8830473642224026`*^9, 
   3.883047370884178*^9}, {3.883057675371627*^9, 3.8830576816278543`*^9}, 
   3.883057873180106*^9, 3.8830579240071135`*^9, 3.8830580611544886`*^9, 
   3.8832177336382904`*^9, 3.883217793099225*^9, {3.88321884757168*^9, 
   3.8832188749208317`*^9}, 3.88322001592784*^9, 3.883221431160182*^9, 
   3.88322167635341*^9, 3.8832217674038496`*^9, {3.883221806037462*^9, 
   3.883221826758658*^9}, 3.8832218963949623`*^9, 3.883221945994011*^9, 
   3.8832220963757086`*^9, 3.88322223099936*^9, 3.883373354616295*^9, 
   3.883378624240348*^9, 3.883383671305002*^9, {3.8833838014254384`*^9, 
   3.8833838159971347`*^9}, 3.8833840305964384`*^9, 3.8833854365552588`*^9, 
   3.883386232748217*^9, 3.8833914324016285`*^9, 3.883391594487854*^9, {
   3.8833981338569903`*^9, 3.883398140694837*^9}, 3.8834000133903813`*^9, 
   3.883484944167568*^9, 3.883486782154817*^9, 3.883487453312111*^9, {
   3.8834887484274054`*^9, 3.8834887723284063`*^9}, 3.883492402579826*^9, 
   3.883492483438476*^9, 3.883492522386956*^9, {3.8834926245455494`*^9, 
   3.8834926340065365`*^9}},
 CellLabel->
  "Out[1591]=",ExpressionUUID->"5cdf8210-4e9a-42f3-a33b-b9aa39163e05"],

Cell[BoxData["\<\"We must also include a IGlossSet\"\>"], "Output",
 CellChangeTimes->{
  3.883042163684002*^9, {3.883042211436954*^9, 3.883042214203782*^9}, 
   3.883045779362011*^9, 3.8830458526885805`*^9, 3.8830459051777678`*^9, {
   3.883045940869322*^9, 3.8830459700948515`*^9}, {3.8830463452396574`*^9, 
   3.8830463520980425`*^9}, 3.8830471614905453`*^9, {3.8830473642224026`*^9, 
   3.883047370884178*^9}, {3.883057675371627*^9, 3.8830576816278543`*^9}, 
   3.883057873180106*^9, 3.8830579240071135`*^9, 3.8830580611544886`*^9, 
   3.8832177336382904`*^9, 3.883217793099225*^9, {3.88321884757168*^9, 
   3.8832188749208317`*^9}, 3.88322001592784*^9, 3.883221431160182*^9, 
   3.88322167635341*^9, 3.8832217674038496`*^9, {3.883221806037462*^9, 
   3.883221826758658*^9}, 3.8832218963949623`*^9, 3.883221945994011*^9, 
   3.8832220963757086`*^9, 3.88322223099936*^9, 3.883373354616295*^9, 
   3.883378624240348*^9, 3.883383671305002*^9, {3.8833838014254384`*^9, 
   3.8833838159971347`*^9}, 3.8833840305964384`*^9, 3.8833854365552588`*^9, 
   3.883386232748217*^9, 3.8833914324016285`*^9, 3.883391594487854*^9, {
   3.8833981338569903`*^9, 3.883398140694837*^9}, 3.8834000133903813`*^9, 
   3.883484944167568*^9, 3.883486782154817*^9, 3.883487453312111*^9, {
   3.8834887484274054`*^9, 3.8834887723284063`*^9}, 3.883492402579826*^9, 
   3.883492483438476*^9, 3.883492522386956*^9, {3.8834926245455494`*^9, 
   3.8834926340116463`*^9}},
 CellLabel->
  "Out[1596]=",ExpressionUUID->"e94b2515-3ac8-4090-8f14-9ca880e0728f"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8830484586843624`*^9, 3.883048475359644*^9}},
 CellLabel->
  "In[1600]:=",ExpressionUUID->"04a56e90-8c3e-4ff2-b914-85349b575363"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Some quick examples", "Subsection",
 CellChangeTimes->{{3.8832188327430863`*^9, 
  3.8832188380543523`*^9}},ExpressionUUID->"dee3620d-046f-4d29-aeec-\
ccab23562309"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"graphState", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"S2N", ",", "SEset", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}], "[", 
  "graphState", "]"}]}], "Input",
 CellChangeTimes->{{3.8830451963485055`*^9, 3.8830452186483727`*^9}, {
   3.883046612216039*^9, 3.8830466299892626`*^9}, {3.883046688249011*^9, 
   3.883046707370636*^9}, 3.8830578326866674`*^9},
 CellLabel->
  "In[1601]:=",ExpressionUUID->"6117a4ce-e993-424d-8484-63a81dce4188"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8830452143357835`*^9, 3.883045218991933*^9}, 
   3.8830459073632345`*^9, {3.8830466189785786`*^9, 3.883046630654952*^9}, 
   3.8830467099373283`*^9, 3.8830468455883274`*^9, 3.8830578852210045`*^9, 
   3.883217816096075*^9, {3.883218847626835*^9, 3.8832188749844446`*^9}, 
   3.8833836713669605`*^9, {3.8833838014995017`*^9, 3.8833838160703583`*^9}, 
   3.8833840306801143`*^9, 3.883385436665676*^9, 3.8833862328271813`*^9, 
   3.8833914326713657`*^9, 3.883391594767996*^9, {3.883398134186632*^9, 
   3.88339814097815*^9}, 3.883400013647869*^9, 3.8834849443523693`*^9, 
   3.8834867823040233`*^9, 3.883487453445131*^9, 3.8834887484883575`*^9, 
   3.8834924026558847`*^9, 3.8834924836085863`*^9, 3.8834925225348206`*^9, {
   3.883492624704051*^9, 3.883492634157528*^9}},
 CellLabel->
  "Out[1601]=",ExpressionUUID->"2b29c4c1-bdd2-4540-96ce-253145ab4795"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.264425, 0.423024, 0.3849], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{8.572642679708466, 0.8403283278661817}, {
        7.60496729340499, 0.5880061491918189}, {
        7.60496729340499, -0.011993850808181106`}, {
        8.20496729340499, -0.011993850808181106`}, {9.172642679708467, 
        0.2403283278661817}, {10.07412268357509, 0.6818782587802517}, {
        10.07412268357509, 1.2818782587802517`}, {9.47412268357509, 
        1.2818782587802517`}}, SplineClosed -> True]]}, 
     {RGBColor[0.416394, 0.555345, 0.24182], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{6.622971333039225, 0.398896975841361}, {
        5.623629867696277, 0.3666496327564815}, {
        5.623629867696277, -0.2333503672435185}, {
        6.2236298676962765`, -0.2333503672435185}, {
        7.222971333039225, -0.20110302415863895`}, {
        8.20496729340499, -0.011993850808181106`}, {8.20496729340499, 
        0.5880061491918189}, {7.60496729340499, 0.5880061491918189}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.813033, 0.766292, 0.303458], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{4.985774162243699, 0.32407490745495365`}, {
        4.230954751745997, 0.40001094007043897`}, {3.630954751745997, 
        0.40001094007043897`}, {3.630954751745997, -0.199989059929561}, {
        4.62508357606247, -0.3}, {5.225083576062469, -0.3}, {
        6.2236298676962765`, -0.2333503672435185}, {6.2236298676962765`, 
        0.3666496327564815}, {5.623629867696277, 0.3666496327564815}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.812807, 0.518694, 0.303459], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{3.2434476416245954`, 0.5455117607002339}, {
        2.28623505996953, 0.8470053654829821}, {1.68623505996953, 
        0.8470053654829821}, {1.68623505996953, 0.2470053654829822}, {
        2.643447641624596, -0.05448823929976612}, {
        3.630954751745997, -0.199989059929561}, {
        4.230954751745997, -0.199989059929561}, {4.230954751745997, 
        0.40001094007043897`}}, SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{1.2876706579526098`, 0.8897877218963612}, {0.3, 
        1.0111257713411703`}, {-0.3, 1.0111257713411703`}, {-0.3, 
        0.4111257713411703}, {0.6876706579526097, 0.2897877218963613}, {
        1.68623505996953, 0.2470053654829822}, {2.28623505996953, 
        0.2470053654829822}, {2.28623505996953, 0.8470053654829821}}, 
        SplineClosed -> True]]}}, {
     {RGBColor[0.264425, 0.423024, 0.3849], Thickness[0.01], 
      BSplineCurveBox[{{9.77412268357509, 0.9818782587802517}, {
       8.872642679708466, 0.5403283278661817}, {7.90496729340499, 
       0.2880061491918189}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.416394, 0.555345, 0.24182], Thickness[0.01], 
      BSplineCurveBox[{{7.90496729340499, 0.2880061491918189}, {
       6.922971333039225, 0.09889697584136103}, {5.923629867696277, 
       0.0666496327564815}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.813033, 0.766292, 0.303458], Thickness[0.01], 
      BSplineCurveBox[{{5.923629867696277, 0.0666496327564815}, {
       4.92508357606247, 0.}, {3.930954751745997, 0.10001094007043898`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.812807, 0.518694, 0.303459], Thickness[0.01], 
      BSplineCurveBox[{{3.930954751745997, 0.10001094007043898`}, {
       2.9434476416245956`, 0.24551176070023387`}, {1.98623505996953, 
       0.5470053654829822}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{1.98623505996953, 0.5470053654829822}, {
       0.9876706579526098, 0.5897877218963613}, {0., 0.7111257713411703}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      TagBox[{
        TagBox[DiskBox[{9.77412268357509, 0.9818782587802517}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], 
        InsetBox["1", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{7.90496729340499, 0.2880061491918189}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], 
        InsetBox["2", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{5.923629867696277, 0.0666496327564815}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], 
        InsetBox["3", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{3.930954751745997, 0.10001094007043898}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], 
        InsetBox["4", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[DiskBox[{1.98623505996953, 0.5470053654829822}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$5"], 
        InsetBox["5", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"], 
      TagBox[{
        TagBox[DiskBox[{0., 0.7111257713411703}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$6"], 
        InsetBox["6", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$6"]}}]}]], "Output",
 CellChangeTimes->{{3.8830452143357835`*^9, 3.883045218991933*^9}, 
   3.8830459073632345`*^9, {3.8830466189785786`*^9, 3.883046630654952*^9}, 
   3.8830467099373283`*^9, 3.8830468455883274`*^9, 3.8830578852210045`*^9, 
   3.883217816096075*^9, {3.883218847626835*^9, 3.8832188749844446`*^9}, 
   3.8833836713669605`*^9, {3.8833838014995017`*^9, 3.8833838160703583`*^9}, 
   3.8833840306801143`*^9, 3.883385436665676*^9, 3.8833862328271813`*^9, 
   3.8833914326713657`*^9, 3.883391594767996*^9, {3.883398134186632*^9, 
   3.88339814097815*^9}, 3.883400013647869*^9, 3.8834849443523693`*^9, 
   3.8834867823040233`*^9, 3.883487453445131*^9, 3.8834887484883575`*^9, 
   3.8834924026558847`*^9, 3.8834924836085863`*^9, 3.8834925225348206`*^9, {
   3.883492624704051*^9, 3.8834926343198233`*^9}},
 CellLabel->
  "Out[1602]=",ExpressionUUID->"f0cb08d2-d84b-4711-84be-2312e599a3a8"]
}, Open  ]],

Cell["Quick Test:", "Text",
 CellChangeTimes->{{3.883046774533574*^9, 
  3.8830467780484834`*^9}},ExpressionUUID->"13dd0558-13bd-472c-b0f9-\
d49e73b6cc72"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AppendTo", "[", 
  RowBox[{"graphState", ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "5", ",", "4", ",", "7"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}], "[", 
  "graphState", "]"}]}], "Input",
 CellChangeTimes->{{3.883046620831731*^9, 3.883046622559492*^9}, {
  3.883046783066863*^9, 3.883046810343986*^9}},
 CellLabel->
  "In[1603]:=",ExpressionUUID->"86a85f89-ae12-4618-b595-732757f42264"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "5", ",", "4", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883046810741686*^9, 3.8830578880970964`*^9, {3.88321884842491*^9, 
   3.883218875079832*^9}, 3.883383672083043*^9, {3.88338380159037*^9, 
   3.883383816161216*^9}, 3.883384030787079*^9, 3.883385436771676*^9, 
   3.8833862329181767`*^9, 3.8833914328842363`*^9, 3.8833915949983673`*^9, {
   3.883398134401065*^9, 3.883398141210477*^9}, 3.883400013910617*^9, 
   3.8834849535203257`*^9, 3.8834867825277834`*^9, 3.883487453671089*^9, 
   3.8834887485980473`*^9, 3.8834924027696433`*^9, 3.883492483870614*^9, 
   3.8834925227575846`*^9, {3.8834926248745513`*^9, 3.883492634404634*^9}},
 CellLabel->
  "Out[1603]=",ExpressionUUID->"191ba700-6848-470b-ab30-15b49ebca3cf"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.2608336666666667, 0.3969803333333333, 0.4426503333333333], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{6.507074458925162, 1.791881741685573}, {
        5.668884676947168, 1.441145400470304}, {5.668884676947168, 
        0.8411454004703038}, {6.2688846769471676`, 0.8411454004703038}, {
        7.107074458925162, 1.191881741685573}, {7.9243145372661195`, 
        1.571356994900618}, {7.9243145372661195`, 2.171356994900618}, {
        7.32431453726612, 2.171356994900618}}, SplineClosed -> True]]}, 
     {RGBColor[
      0.33311066666666667`, 0.5032283333333333, 0.26154733333333335`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{4.992521712791929, 1.380097746568376}, {
        4.47460493409189, 1.4064408695324426`}, {3.8746049340918907`, 
        1.4064408695324426`}, {3.8746049340918907`, 0.8064408695324425}, {
        4.776268818126842, 0.7605790375786059}, {5.376268818126841, 
        0.7605790375786059}, {6.2688846769471676`, 0.8411454004703038}, {
        6.2688846769471676`, 1.441145400470304}, {5.668884676947168, 
        1.441145400470304}}, SplineClosed -> True]]}, 
     {RGBColor[0.624866, 0.673302, 0.264296], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{3.565450559794442, 1.5431196658950843`}, {
        2.631252724803897, 1.7332281575890935`}, {2.031252724803897, 
        1.7332281575890935`}, {2.031252724803897, 1.1332281575890935`}, {
        2.9654505597944425`, 0.9431196658950842}, {3.8746049340918907`, 
        0.8064408695324425}, {4.47460493409189, 0.8064408695324425}, {
        4.47460493409189, 1.4064408695324426`}}, SplineClosed -> True]]}, 
     {RGBColor[0.8562609999999999, 0.742794, 0.31908333333333333`], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{1.6290011591605482`, 2.780911027403901}, {
        0.67647268754557, 2.413977708546705}, {0.67647268754557, 
        1.813977708546705}, {1.27647268754557, 1.813977708546705}, {
        1.7063089558111704`, 1.9795593716464737`}, {2.031252724803897, 
        1.1332281575890935`}, {2.631252724803897, 1.1332281575890935`}, {
        2.631252724803897, 1.7332281575890935`}, {2.229001159160548, 
        2.780911027403901}}, SplineClosed -> True]]}, 
     {RGBColor[0.7851613333333333, 0.4255956666666667, 0.279293], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{-0.3, 2.394590482267644}, {-0.3, 1.7945904822676442`}, {
        0.035289473917302694`, 0.7806930586860485}, {0.6352894739173027, 
        0.7806930586860485}, {0.6352894739173027, 1.3806930586860486`}, {
        0.4971218852645788, 1.7985042083174587`}, {1.27647268754557, 
        1.813977708546705}, {1.27647268754557, 2.413977708546705}, {
        0.67647268754557, 2.413977708546705}}, SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.9414787817701271, 0.7475963798987656}, {
        0.842469777235541, 0.3}, {0.842469777235541, -0.3}, {
        1.442469777235541, -0.3}, {1.6731359764405473`, 0.7427878748278258}, {
        2.631252724803897, 1.1332281575890935`}, {2.631252724803897, 
        1.7332281575890935`}, {2.031252724803897, 1.7332281575890935`}, {
        1.5944667106102244`, 1.5552343429738515`}, {1.27647268754557, 
        2.413977708546705}, {0.67647268754557, 2.413977708546705}, {
        0.67647268754557, 1.813977708546705}, {0.8396829600826688, 
        1.3732280119246199`}, {0.6352894739173027, 1.3806930586860486`}, {
        0.035289473917302694`, 1.3806930586860486`}, {0.035289473917302694`, 
        0.7806930586860485}}, SplineClosed -> True]]}}, {
     {RGBColor[0.2608336666666667, 0.3969803333333333, 0.4426503333333333], 
      Thickness[0.01], 
      BSplineCurveBox[{{7.62431453726612, 1.8713569949006181`}, {
       6.807074458925162, 1.491881741685573}, {5.968884676947168, 
       1.1411454004703039`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[
      0.33311066666666667`, 0.5032283333333333, 0.26154733333333335`], 
      Thickness[0.01], 
      BSplineCurveBox[{{5.968884676947168, 1.1411454004703039`}, {
       5.076268818126842, 1.060579037578606}, {4.1746049340918905`, 
       1.1064408695324426`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.624866, 0.673302, 0.264296], Thickness[0.01], 
      BSplineCurveBox[{{4.1746049340918905`, 1.1064408695324426`}, {
       3.2654505597944423`, 1.2431196658950843`}, {2.331252724803897, 
       1.4332281575890935`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8562609999999999, 0.742794, 0.31908333333333333`], Thickness[
      0.01], BSplineCurveBox[{{2.331252724803897, 1.4332281575890935`}, {
       1.9290011591605483`, 2.4809110274039012`}, {0.97647268754557, 
       2.113977708546705}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.7851613333333333, 0.4255956666666667, 0.279293], Thickness[
      0.01], BSplineCurveBox[{{0.97647268754557, 2.113977708546705}, {0., 
       2.094590482267644}, {0.3352894739173027, 1.0806930586860486`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{0.3352894739173027, 1.0806930586860486`}, {
       1.3731359764405473`, 1.0427878748278259`}, {0.97647268754557, 
       2.113977708546705}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{0.3352894739173027, 1.0806930586860486`}, {
       1.3731359764405473`, 1.0427878748278259`}, {2.331252724803897, 
       1.4332281575890935`}},
       SplineWeights->{1, 6, 1}], 
      BSplineCurveBox[{{0.3352894739173027, 1.0806930586860486`}, {
       1.3731359764405473`, 1.0427878748278259`}, {1.142469777235541, 0.}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      TagBox[{
        TagBox[DiskBox[{7.62431453726612, 1.8713569949006181}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], 
        InsetBox["1", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{5.968884676947168, 1.1411454004703039}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], 
        InsetBox["2", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{4.1746049340918905, 1.1064408695324426}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], 
        InsetBox["3", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{2.331252724803897, 1.4332281575890935}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], 
        InsetBox["4", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[DiskBox[{0.97647268754557, 2.113977708546705}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$5"], 
        InsetBox["5", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"], 
      TagBox[{
        TagBox[DiskBox[{0.3352894739173027, 1.0806930586860486}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$6"], 
        InsetBox["6", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$6"], 
      TagBox[{
        TagBox[DiskBox[{1.142469777235541, 0.}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$7"], 
        InsetBox["7", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$7", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$7"]}}]}]], "Output",
 CellChangeTimes->{
  3.883046810741686*^9, 3.8830578880970964`*^9, {3.88321884842491*^9, 
   3.883218875079832*^9}, 3.883383672083043*^9, {3.88338380159037*^9, 
   3.883383816161216*^9}, 3.883384030787079*^9, 3.883385436771676*^9, 
   3.8833862329181767`*^9, 3.8833914328842363`*^9, 3.8833915949983673`*^9, {
   3.883398134401065*^9, 3.883398141210477*^9}, 3.883400013910617*^9, 
   3.8834849535203257`*^9, 3.8834867825277834`*^9, 3.883487453671089*^9, 
   3.8834887485980473`*^9, 3.8834924027696433`*^9, 3.883492483870614*^9, 
   3.8834925227575846`*^9, {3.8834926248745513`*^9, 3.8834926345526466`*^9}},
 CellLabel->
  "Out[1604]=",ExpressionUUID->"807a5ce7-e3e2-4fc2-9521-624a8cb82d1c"]
}, Open  ]],

Cell["\<\
Great, we can use this hypergraph plot function to quickly represent the SERD \
network single microstate paths, by simply concatenating the SE and PP sets \
we should get a relatively accurate topological representation of the system. \
This should do for now.\
\>", "Text",
 CellChangeTimes->{{3.88304685771313*^9, 
  3.883046936791629*^9}},ExpressionUUID->"19d5f2ee-741d-4b3f-8dbb-\
c1ffe0ad4be8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.883046769053601*^9, 3.8830467706370306`*^9}},
 CellLabel->
  "In[1605]:=",ExpressionUUID->"26881c1b-0fa4-46ff-aec5-6e5fe5da4a7b"],

Cell["\<\
Ok it works. So we can use expressions to substitute and then when we want to \
extract out the numerical information to find IG addresses we can simply use \
the symbolToNumber function.\
\>", "Text",
 CellChangeTimes->{{3.8830452305104685`*^9, 
  3.883045280652294*^9}},ExpressionUUID->"f454622b-980b-4b56-beb6-\
974a98628bf7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Notes about symbols and numbers", "Subsection",
 CellChangeTimes->{{3.883220056890334*^9, 
  3.8832200627821665`*^9}},ExpressionUUID->"b185cca0-0a58-4e49-9fe4-\
1ec669d6844f"],

Cell[TextData[{
 "At this point I am unsure whether which indices to keep as symbols and \
which to keep as numbers and what is the most efficient approach.\n\nWe want \
to minimize conversions between the two.\n\n",
 StyleBox["Using numbers:",
  FontWeight->"Bold"],
 "\nWhen a number is altered in a storage location it is only changed in that \
specific storage location, this means that if that number is referred to in \
multiple elements, then operations need to be applied to access each elements \
memory location and change that number in each memory location, which is \
potentially computationally expensive.\n\n",
 StyleBox["Using symbols:\n",
  FontWeight->"Bold"],
 "When a symbol is used to refer to an index of an adjacent element, every \
element that refers to the adjacent element access the same location, so you \
only need to change it once. However you cannot use symbols as indices and \
you have to perform a conversion operation in order to do that. This may or \
may not be computationally expensive, however it may be a case of give and \
take. Not having to change the value at all successive neighbours saves a lot \
of computation.",
 "\n\nLet\[CloseCurlyQuote]s break this down. There are three main operations \
that intend to implement initially.\n",
 StyleBox["Split",
  FontWeight->"Bold"],
 ", ",
 StyleBox["PSB propagation",
  FontWeight->"Bold"],
 ", and ",
 "later",
 StyleBox[" duplication",
  FontWeight->"Bold"],
 ".\nThen once all three of those have been implemented we can look at \
reduction.\n\nIn this first scenario I opt for using symbols for all \
elements, PPs (pn) SEs (sn) and IGs (xn). "
}], "Text",
 CellChangeTimes->{{3.8832200695012665`*^9, 3.8832201554376197`*^9}, {
  3.883220188232077*^9, 3.8832206653228073`*^9}, {3.883221465934494*^9, 
  3.88322152244875*^9}},ExpressionUUID->"d5e50ad8-4254-4ce7-8527-\
bfd3f62422c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Split test", "Subsection",
 CellChangeTimes->{{3.883046976903694*^9, 
  3.883046978529755*^9}},ExpressionUUID->"b9cfcc5b-fbc0-41ec-9e28-\
7b513a3524a6"],

Cell[CellGroupData[{

Cell[BoxData["PPset"], "Input",
 CellLabel->
  "In[1606]:=",ExpressionUUID->"0ac660af-99ed-4ff6-8a9f-6a0afa9ce269"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "x1", "}"}], ",", 
   RowBox[{"{", "x6", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883058151813101*^9, {3.88321884858208*^9, 3.8832188751807003`*^9}, 
   3.8833836721810436`*^9, {3.883383801718483*^9, 3.8833838162672157`*^9}, 
   3.8833840309160795`*^9, 3.883385436898259*^9, 3.8833862330431814`*^9, 
   3.8833914331166773`*^9, 3.8833915952122583`*^9, {3.8833981346206584`*^9, 
   3.8833981414608297`*^9}, 3.883400014146984*^9, 3.8834849537776694`*^9, 
   3.883486782749316*^9, 3.8834874539198523`*^9, 3.883488748751876*^9, 
   3.883492402899632*^9, 3.8834924841678395`*^9, 3.8834925230404706`*^9, {
   3.883492625119816*^9, 3.8834926346987224`*^9}},
 CellLabel->
  "Out[1606]=",ExpressionUUID->"5c15e405-f293-4733-81c5-3d3a6546d6aa"]
}, Open  ]],

Cell[TextData[{
 "We must now consider a ",
 StyleBox["Split",
  FontWeight->"Bold"],
 " that occurs at one end and generates a PSB.\n\nWe may need to make \
alterations to the PSB element structure to account for PSB superposition and \
variation in the order of computational implementation. A PSB now corresponds \
to two sets that are each partitioned. Each set corresponds to the set that \
will branch and the two subsets within correspond to the PP sets and SE sets \
respectively.\n\nPSB={{{PP FROM SET 1},{SE FROM SET 1}},{{PP FROM SET 2},{SE \
FROM SET 2}}}\n\nThis allows for subTS superposition to occur."
}], "Text",
 CellChangeTimes->{{3.8830459931283274`*^9, 3.88304601819866*^9}, {
  3.883046593090474*^9, 3.8830466027881775`*^9}, {3.88304698475083*^9, 
  3.883046991591222*^9}, {3.8832219484404197`*^9, 3.883221949618063*^9}, {
  3.88339032680394*^9, 3.883390369794654*^9}, {3.8833910866572995`*^9, 
  3.8833912762385707`*^9}, {3.8833913187541294`*^9, 
  3.883391319294753*^9}},ExpressionUUID->"a7df3718-f354-472f-bcaf-\
d9a35ebac300"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzt3Xl8FOXhP3BErP4qalqlQAGDZ1tthbZqBb8aFJAiVVBRW7VNqF/DGRJI
OBKOBFBuCFc4AuTiiigJh6RBjgSBgFyBAEHOQBWqgoQkwBc5fx8yznbd7G5m
d56ZZ7Lzef/BKzs7z7PPMzMfnpl9dmfv+2fkq+G1a9WqFX0b/nm1y4Dn+vbt
EvtaEB683ju6e9fe7/1v+94x73V9r+9T/7wZC7/Buo1vqlXrxt/XiYiIiIiI
iIiIiIiIiCwpg8hO/u///s/oTP31r3+9g8geatWqZU6mwOhXIZLuX//6FzNF
JBAzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0Uk
FjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQW
M0UkVsBnKiwsLDU11fzXJdsK+EyFhoYyU2SmgM8UkclslanS0lK5DSA7sE+m
SkpKgoKC8vLyJLaB7MA+mQJeWJEJbJUpIhPYNlM8CSSD2DNTOAm86667+JYF
GcGembpe+ZaF7CZQYLJtpogMwkylVpLdCgoczFRoJdmtoMDBTBGJxUwRicVM
OZSWljZv3jw7O1t2Q6hmY6acxcfHc9KKdGKmiMRipjzhpDD5h5lyKy8vD5uF
sSI/MFOe8EO25B9mikgsZqpahYWF/PASacdMVSsyMrJZs2ayW0E1BjOlBSet
SDtmikgsZsonvKstVYuZ8gmurQoLC2W3giyNmSISi5nyG9+4ILeYKf/wrrbk
CTPlN75ZQW4xU0RiMVP64cKK3w4mB2ZKv/j4eN7VlhyYKSH4TStyYKaIxGKm
xOJdbYmZEot3tSULZioxMZGXJ1RzWTBTISEhfGuaai4LZsrFpEmTauLb1Lyr
rW1ZPFM4CQwODq6hp4K8q609WTxTLnCIpqWlCWkPkUFqVqby8vJq6CcWauhQ
S36oWZlygQO1Rnzbgne1tZUananExERcbYmt0yA1IvskRI3O1PUff9m2pJLw
lyDySU3PlLPQ0NCQkBBDX0I/3tU24AVSpq7/+K0Aa45ZvKttwAuwTDlr2rRp
fHy8ma+oUU1835K0C+BMlVZyPLTmsEWBJ4Az5QzhCgoKstonhXhX24Bkk0xd
r3xzwGrDFu9qG5DskylnCBQnYckg9szUdevdnY9vXAQM22bKGa6zcLUl8ajm
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
zWOPPaZ88fD+++9/9tlnX3rpJYzCrVu3fvTRR2+55RYsb9KkidsPzZKhAixT
ykW90a9iHSdOnFi+fPm4ceOioqJwghcWFtazZ88RI0YsWrRo//79sltnUzU9
UxiJnM+USioJfxUi7WpcphAZ55kjl0zVULiGatq0qfWv9UiLGpcpXGvUuEuk
aim/tW2FWWbSz/qZ6tSpk/N7d/zPnCzOgpnKz893ee9Oz/f7rIyXfgHJgpkK
Dg4OgEskLdBT/I8huxUkmAUzZZ/LCpzH2qez9mHBTBHVaMyUyQoryW4FGYiZ
MllkZGRISIjsVpCBmCnz8RoqsDFTRGIxUybABVSrVq04PNkEM2UCZArXUMyU
TTBTRGIxU8bhwGRPzJRBECjHnWPJVpgp4yBQHKpsiJkiEouZEosfiyVmSiy7
3WSGqmKmxHLcOZZsi5kiEouZ0g/XUFFRUbJbQVbBTOmn3DmWp3ykYKaIxGKm
iMRipvzDO8eSJ8yUf3jnWPKEmSISi5nyCe8cS9VipnzCO8dStZgpn/AjslQt
ZopILGaqWt5/tJrIBTNVrcjIyGp/tJrIgZnSgtdQpB0zRSQWM+UW7xxLfmOm
3OKdY8lvzBSRWMyUMw5MpB8z5cA7x5IQzJQz3jmW9GOmiMRipvixWBKLmeKd
Y0ksZop3jiWxmCkiseyZKd45loxjz0zxzrFkHHtmisg4zBSRWPbJVElJCe8c
SyawT6YgPj6e11BkNFtlisgEAZ8p3jmWTBbwmeKdY8lkAZ8pfkSWTBbwmSIy
GTNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQW
M0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYz
RSSWyZkKCQmppcrLy3M867zcuVQtJ26Xo6BjISqsdrnzPWnxt9vlqamprVTO
vwMSGRlZ7XLnRrZy4nY5CjoWosJql6Nhbhvpabmexic4cbvc+UVLSkqqXe68
u/F3tcudb8qNOqtdblDj8ys5vyj+zle5XT527FgzM4W9madyvj2s83LnUnlO
3C53PjzQqXiVy8ZxLHfZg9Uud9mD1S53bmS8E7fLPTVST+NRNkTlkp1qlzs3
MsSJ2+Uuwa92uUvwq12uv/HNmjUz879i5+U89yMSiNdTRGIxU0RiMVNEYjFT
RGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNE
YjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0Ri
MVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIF
fKYSExPz8vLMf12yLTtkqrS01PzXJdsK+Ew5KykpSUhIYMTIULbKVHZ2drNm
zeS2gQKerTLlAsMWxywSzs6Z6lhJdiso0Ng5UxikMFTJbgUFGjtnykXz5s1x
wSW7FVTjMVMKjFnx8fEctkg/ZsotRIzvupN/mCm38vLygoODmSnyAzOlRWkl
2a2gmoGZ0iI0NJSTxaQRM6UFBqnCwkIzX/E///nPmjVrkpOTR4wYMbAS/sBD
LMRTZraEfMVM+aFTp06pqakGVb5nz55JkyaFh4fHxMQkJSV99NFH/6qEP/AQ
C/EUVsBqBjWAdGKm/BAfH2/E90fOnTs3Z84cRGbatGk7duw47wGewgpYDSuj
iPBmkE7MlH4YNfS/g3Hs2LFBgwYNGTJk+/btntLkDKthZRRBQSG9IFGYKZ1w
nXXXXXfpnCw+fvx4nz59pkyZgmxqCZQCK6MICqK4oN6QAMyUWH68646NP3To
0MmTJ2tPkzMURHET9iBpxEyJlZiYGBwc7FOR9PT02NjY06dP+5cpFERxVGJM
h8hnzJRwPr3rfvDgwfDw8M2bN/sXKAWKoxJUZVynSDtmylCRkZEYubysMHPm
zAkTJmgJTlxcXHJysqdnUQmqMq1f5AUzZajU1FQv3x8pKyvD+LJx40YtmSou
Lsaeql+/vttkoRJUhQrN7B25xUyZKS0tzfkdjC1btvTo0aOiokJLpuDtt9/G
zqpTp07VZKESVIUKJfaOFMyUaZCm4OBg58nizMzMMWPGaAyUY6hSVE0WqkKF
8vpHP2CmJEIKUlJStGdKGapuu+02t8lCVVOmTJHdJ2KmpBk3btwtt9zy0EMP
tfTFH//4x1pVKMnq3r37H/7wh3379snumd0xU7LgJLBBgwYdOnTo7YtXX321
aqDwb4sWLcLDwxs3boy/IyIiTpw4Ibt/9sVMmcnlI0zTp0/38va4W8iOEiLn
NOXm5uIpVIUK586di7EPTw0ePJifsJWCmTJNaWkpNrXzjHBWVtaIESO0BwrZ
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
pvqr6k3VG6rXVZ1Vr6leVb2i6qTqqHpZ9ZLqL6oOqhdV7VV/VrVTvaBqq2qj
aq16XvWcqpUqRPWs6hnV/6ieVrVUtVA9pfqT6knVE6rHVX9U/UH1e1VzVTPV
Y6rfqX6relT1iOo3ql+rfqV6WPWQ6kHVA6r7VfepmqqCVfeqmqgaqxqpfqlq
qGqgqq/6haqe6h7V3aqfq36mClLdpbpTdYeqrup21U9V/091m+rWW2+95ZZb
TMsUtpuSGkeOHMlyZO0t1duqd1R/V/1DFaoKU3VR/VP1rup/Ve+pwlVdVd1U
3VU9VD1VvVQRqt6qSFWUqo+qrypaFaPqp+qvGqAaqIpVxakGqQarhjgZqopX
JaiGqYarRqjeV32gGqkapRqtGqMaqxqnGq+aoJqoSlRNUk1WTVFNVU1TJamm
q2aoZqpmqZJVs1VzVHNVKapUVZoqXZWhmqear1qgWqhapMrMzMRu4rkfkUC8
niISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5kiEouZ
IhKLmSISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5ki
EouZsrKvvvpq586dGyrhDzyU3SKqHjNlQfv27UtJSYmKilJuk6vcyVb5Gwvx
FFaQ3UbyiJmylMOHD0+cOBHZGT9+/KpVq/Dw3Llz5yvhDzzEQjyFFbAaHspu
L7nBTFlHTk4OwjJp0iQMQ+e9wgpYDSujiOxWkytmyiIWLVqkZMR7mpxh36EI
CspuO/0IM2UFWVlZSEdBQYH2QCk2b96Mgiguuwf0X8yUdNu2bUMu8vLyfA2U
AgVRHJXI7gf9gJmS6+rVqwMHDkxPT/cvUAoURyWoSnZv6AZmSq7c3NzevXuf
Pn1aT6ZQHJWgKtm9oRuYKbkGDRq0ePFiPYFSoBJUJbs3dAMzJdGhQ4dwKXTk
yBH9mUIlqAoVyu4TMVMy5eTkYHDRHygFquJ0lRUwUxLNnj07KSlJVKZQFSqU
3SeyV6Z27ty5Z88ex8Njx46tX7/e8bC8vByX+RcuXHAsWbt2rfPHVoUXHzp0
6IIFC0RlClWNHz9ewGYifWyVqU6dOoWFhTkeJiYmNm3a1PGwsLAQm6KkpMSx
JCgoKDU11bjif//73z/88ENRmcK5X6NGjcrKynRuJdLJVpn6vpLj4eXLl507
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
J6TkYqYkSk9PnzRpkqhMoapu3bpxQkq6gM/UxYsXnXt3+fLlc+fOOR5eu3at
oqLi6tWrjiU4OC9dumRO8YkTJ2ZkZIjK1Jw5c4KCgjghJV3AZyosLMz5HbDU
1FQceI6HJSUl6H5hYaFjSdOmTRMTE80pPmrUqA8//FBUpoYMGdK4cWNkXM/m
Iv0CPlP79u3btWuX4+HJkyfz8/MdD9Hx1atXO0+Mbty48fjx4+YUHz9+/IIF
C0RlClWhQj3bioQI+ExZGc7WkpKSRGUKVaFC2X0iZkqmnJycuLg4UZlCVahQ
dp+ImZJJ+fzDkSNH9AcKlSifx5DdJ2KmJBs0aJDfn551hkpQleze0A3MlFy5
ubkRERGnTp3SEygURyWoSnZv6AZmSq5r167Fxsamp6fryRSKoxJUJbs3dAMz
Jd327dtxKaTcucUPKIjiqER2P+gHzJQVKF/XLSgo8DVQKKJ8QVh2D+i/mCmL
yMzMRDpycnK0BworowgKym47/QgzZR25ubnISGJi4t69e72nCStgNazM9yUs
iJmylCNHjihhGTduHPJy6NChiooKJUf4Aw+xEE8p0cPKsttLbjBTFlRcXJya
mtqnTx/H7WcdN6TFQjyFFWS3kTxipqzsxIkTu3bt2lQJf+Ch7BZR9ZgpIrGY
KSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgp
IrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCki
sZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKx
mCkisZgpIrFMzlQ0kQ2YlqlniGzDhEwREREREREREREREREREREREREREREF
hv8P6cZMKg==
     "], {{0, 447.}, {170.4, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->120],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{142.57046979865774`, Automatic},
   ImageSizeRaw->{170.4, 447.},
   PlotRange->{{0, 170.4}, {0, 447.}}], 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
uM1dd93VwEAiIiJmzpwpWlOzIDZEqJNz+NJtF5UzG46JW0dtbS0aewuPF2qK
ubn5jh07RMsif97oCAwM1LTJSKbR2ECSkpIM+R44YkOEujqHkTc5tzv0bB11
dXXPPPOM+r3EQYMGqT9P5e3t/f3336s+oueF9dvu6x9//HHfvn21vC+tzm+/
/fbdd99VV1drlBaic+bPn//www/30ISnnnqqQzN89tlnTz/99DOGCs66DRs2
6OocnjNnDrLXaob1bB1Xr14NDg5W//UnNjZW/YG9zZs3q4+cX1ZWpj4Th86/
Pnfu3K+//hqr6SrtAwYMeOKJJ+677z4vL69r165plByiQyIjI7/99lt/TTAz
M2vgGFLhMXLkyEWLFn3yySfBhoqFhQW6GLo6h0NDQ5G9VjNs4h2WK1euoMOy
c+dOneQcVQ22tmfPHj8/v65duz7++ON8QF0Uy5cvnzp1qkaHD/WnqsOiMg3p
dkd8fLyPj49oTc2C2BChTs5hgLwhe63u1MStA0ycOHHt2rU6ybl0V1/qrZw/
fx595zvuuOOll16KiooSrdLkyMnJsba2ln/scNVu0jQkQkJC5FyIRYHYEKFO
zmGAvCF7re6U1hEREYHaQCc5T0xMbJAQdI6kAXjffffdVatWidJoglRVVcHG
9+3bJ/PYoeSQrKOBaUhYWVllZWWJ1tQsiA0R6uQcRsaQN2Sv1Z3SOvLz85Gr
Y8eOaZ/2SZMmNfkKwP79+3/66Seclp9++ilH8NYPly9f/vLLLxcvXiznwEkl
R5Omcen24zo4Q2pra0Vrahbph0JlL282ABmTOc0NreOP230Wxe8bqsjNzcXh
O3LkSHN72bJly+DBg3GKfvvtt/ArfQo0KdD87ezsOnbseO+99w4cOFDOu2/h
4eHNPYUOpk2btmDBAtGyWgERIk4tz2HkyszMLCMjQ84eaR0AudL+OV5vb285
3eHk5OQPPvgABvL777+XlZXpQZ3pkJKSMnToUOT25ZdfRif04sWLbm5uUVFR
2hxWVIk4NyorK0WLawVEiDgRrTZikStkTOYeaR0SgYGB2ph2TEyMjY3N2bNn
Ze5uyZIlr7/+Ok7yCRMmnD59uk2ltXtu3rw5Z86cN998E/kcNGiQ+j2lnTt3
ynx5tkng7RYWFsZykwpxIlrFTxpIr83KH6qU1iFRXV1tb2+PM1BBzhMTE5Hz
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
UX2sqKhQn6ZT519HmTds2LDS0lJdNahvv/3Wyckp3CDx8fGxsbHRlVIkrU+f
Pvfff3+PHj3CwsI0Og2IbkExiSM7SxMGDRp05513qpsGCo+OHTviWuDv7y/n
+UYT77BcvXpVy+ej1EFVg63t3btXtKymQWAID0HqRKz0FNzx48cnTJiAE++1
116LjY0VLdFE8fX1jYuLk3/scPVE96SxaUi3O7A1XJFb3amJW8cftx+R0rSf
2ByFhYVoTadOnRKtqWkQmHTzXCdikTRVb6WsrGz06NHS65z8xVb/REVFBQcH
yz920swvjU1DwsrKSs7jSbQOpD0wMFAnrWn16tUG3vdHeNo8b68OkobUqW8c
dQi6yTghBw8enJOTI0iiKYJso8/SwhgR6qhKjsamAaTSVM7DfrSOXbt2IVdH
jhzRvjV5eXkZ+PAdCE+jBwCaA+lC0pC6xrtIT0+XZiMaOXLkvn379K/RBDl/
/jwOR1ZWlpxjB7vo3LlzY9OQWLhwIToscnZK6wCurq4yH+JtAekZ72PHjolW
0xLSkyeaDizQGKQLSWthR6tWrXr33XdhIObm5vAZvQk0WSIjI9Hk5Rw7Pz+/
5p5Cl06PzZs3y9kjrQNIb/0cPHhQm9bk4eGxaNEi0VJaB5cVhKqNUiRKusa1
ui/0aHr16vWXv/xl4sSJuDLqQZ3JcvToURyUtLQ0bY7sggULPD09Ze6R1iER
EhLi4+Mjs7fYGJiGvb19bW2taB2tgyARKgJWphQpQqKQLvl7DA4O7tatW5cu
XXC9aztdJDEx0czMrLi4WNmR3bRpE8xn9+7dMndH65A4c+aMk5NTaGiogpyv
XLmyuY6/YSLd3kGfQoFYpAiJQro02uO1a9e8vb3vu+++nj17zp07t410EbTH
r7/+WsEgTrm5uTglYD4a7YvWIXHo0CFcjgMCAo4fPy4/59HR0TKrd4NC6qNp
NHAH0oLkIEVIlLKdnjp1ys7OrkOHDm+88cbSpUt1q8jEgV2g5EBun3nmGXh7
QUGB/COLbg5OBk2PCK1DnWPHjk2ZMsXW1lZOnzE/P3/y5MnW1tbqj7MaEQgb
wUNCC8Ohq59dNjY26Kpofx+4pKREmpH5ww8/XLdunU60mDI1NTXOzs7I58sv
v7x48eJbt24tWLBAGkL27NmzLR/WsrKysLAwrKzgaRxaR2OkDoirq2tCQkLj
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
     "], {{0, 370.8}, {216.6, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->120],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{174.15000000000003`, Automatic},
   ImageSizeRaw->{216.6, 370.8},
   PlotRange->{{0, 216.6}, {0, 370.8}}]}]], "Input",
 CellChangeTimes->{3.883391301562518*^9},
 CellLabel->
  "In[1607]:=",ExpressionUUID->"487a900a-f529-43c9-8031-0b817dc599d5"],

Cell[BoxData[
 RowBox[{
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
uM1dd93VwEAiIiJmzpwpWlOzIDZEqJNz+NJtF5UzG46JW0dtbS0aewuPF2qK
ubn5jh07RMsif97oCAwM1LTJSKbR2ECSkpIM+R44YkOEujqHkTc5tzv0bB11
dXXPPPOM+r3EQYMGqT9P5e3t/f3336s+oueF9dvu6x9//HHfvn21vC+tzm+/
/fbdd99VV1drlBaic+bPn//www/30ISnnnqqQzN89tlnTz/99DOGCs66DRs2
6OocnjNnDrLXaob1bB1Xr14NDg5W//UnNjZW/YG9zZs3q4+cX1ZWpj4Th86/
Pnfu3K+//hqr6SrtAwYMeOKJJ+677z4vL69r165plByiQyIjI7/99lt/TTAz
M2vgGFLhMXLkyEWLFn3yySfBhoqFhQW6GLo6h0NDQ5G9VjNs4h2WK1euoMOy
c+dOneQcVQ22tmfPHj8/v65duz7++ON8QF0Uy5cvnzp1qkaHD/WnqsOiMg3p
dkd8fLyPj49oTc2C2BChTs5hgLwhe63u1MStA0ycOHHt2rU6ybl0V1/qrZw/
fx595zvuuOOll16KiooSrdLkyMnJsba2ln/scNVu0jQkQkJC5FyIRYHYEKFO
zmGAvCF7re6U1hEREYHaQCc5T0xMbJAQdI6kAXjffffdVatWidJoglRVVcHG
9+3bJ/PYoeSQrKOBaUhYWVllZWWJ1tQsiA0R6uQcRsaQN2Sv1Z3SOvLz85Gr
Y8eOaZ/2SZMmNfkKwP79+3/66Seclp9++ilH8NYPly9f/vLLLxcvXiznwEkl
R5Omcen24zo4Q2pra0Vrahbph0JlL282ABmTOc0NreOP230Wxe8bqsjNzcXh
O3LkSHN72bJly+DBg3GKfvvtt/ArfQo0KdD87ezsOnbseO+99w4cOFDOu2/h
4eHNPYUOpk2btmDBAtGyWgERIk4tz2HkyszMLCMjQ84eaR0AudL+OV5vb285
3eHk5OQPPvgABvL777+XlZXpQZ3pkJKSMnToUOT25ZdfRif04sWLbm5uUVFR
2hxWVIk4NyorK0WLawVEiDgRrTZikStkTOYeaR0SgYGB2ph2TEyMjY3N2bNn
Ze5uyZIlr7/+Ok7yCRMmnD59uk2ltXtu3rw5Z86cN998E/kcNGiQ+j2lnTt3
ynx5tkng7RYWFsZykwpxIlrFTxpIr83KH6qU1iFRXV1tb2+PM1BBzhMTE5Hz
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
UX2sqKhQn6ZT519HmTds2LDS0lJdNahvv/3Wyckp3CDx8fGxsbHRlVIkrU+f
Pvfff3+PHj3CwsI0Og2IbkExiSM7SxMGDRp05513qpsGCo+OHTviWuDv7y/n
+UYT77BcvXpVy+ej1EFVg63t3btXtKymQWAID0HqRKz0FNzx48cnTJiAE++1
116LjY0VLdFE8fX1jYuLk3/scPVE96SxaUi3O7A1XJFb3amJW8cftx+R0rSf
2ByFhYVoTadOnRKtqWkQmHTzXCdikTRVb6WsrGz06NHS65z8xVb/REVFBQcH
yz920swvjU1DwsrKSs7jSbQOpD0wMFAnrWn16tUG3vdHeNo8b68OkobUqW8c
dQi6yTghBw8enJOTI0iiKYJso8/SwhgR6qhKjsamAaTSVM7DfrSOXbt2IVdH
jhzRvjV5eXkZ+PAdCE+jBwCaA+lC0pC6xrtIT0+XZiMaOXLkvn379K/RBDl/
/jwOR1ZWlpxjB7vo3LlzY9OQWLhwIToscnZK6wCurq4yH+JtAekZ72PHjolW
0xLSkyeaDizQGKQLSWthR6tWrXr33XdhIObm5vAZvQk0WSIjI9Hk5Rw7Pz+/
5p5Cl06PzZs3y9kjrQNIb/0cPHhQm9bk4eGxaNEi0VJaB5cVhKqNUiRKusa1
ui/0aHr16vWXv/xl4sSJuDLqQZ3JcvToURyUtLQ0bY7sggULPD09Ze6R1iER
EhLi4+Mjs7fYGJiGvb19bW2taB2tgyARKgJWphQpQqKQLvl7DA4O7tatW5cu
XXC9aztdJDEx0czMrLi4WNmR3bRpE8xn9+7dMndH65A4c+aMk5NTaGiogpyv
XLmyuY6/YSLd3kGfQoFYpAiJQro02uO1a9e8vb3vu+++nj17zp07t410EbTH
r7/+WsEgTrm5uTglYD4a7YvWIXHo0CFcjgMCAo4fPy4/59HR0TKrd4NC6qNp
NHAH0oLkIEVIlLKdnjp1ys7OrkOHDm+88cbSpUt1q8jEgV2g5EBun3nmGXh7
QUGB/COLbg5OBk2PCK1DnWPHjk2ZMsXW1lZOnzE/P3/y5MnW1tbqj7MaEQgb
wUNCC8Ohq59dNjY26Kpofx+4pKREmpH5ww8/XLdunU60mDI1NTXOzs7I58sv
v7x48eJbt24tWLBAGkL27NmzLR/WsrKysLAwrKzgaRxaR2OkDoirq2tCQkLj
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
     "], {{0, 370.8}, {216.6, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->120],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{174.15000000000003`, Automatic},
   ImageSizeRaw->{216.6, 370.8},
   PlotRange->{{0, 216.6}, {0, 370.8}}], " ", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJzt3Xl8FOXhP3BErP4qalqlQAGDZ1tthbZqBb8aFJAiVVBRW7VNqF/DGRJI
OBKOBFBuCFc4AuTiiigJh6RBjgSBgFyBAEHOQBWqgoQkwBc5fx8yznbd7G5m
d56ZZ7Lzef/BKzs7z7PPMzMfnpl9dmfv+2fkq+G1a9WqFX0b/nm1y4Dn+vbt
EvtaEB683ju6e9fe7/1v+94x73V9r+9T/7wZC7/Buo1vqlXrxt/XiYiIiIiI
iIiIiIiIiCwpg8hO/u///s/oTP31r3+9g8geatWqZU6mwOhXIZLuX//6FzNF
JBAzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0Uk
FjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQW
M0UkVsBnKiwsLDU11fzXJdsK+EyFhoYyU2SmgM8UkclslanS0lK5DSA7sE+m
SkpKgoKC8vLyJLaB7MA+mQJeWJEJbJUpIhPYNlM8CSSD2DNTOAm86667+JYF
GcGembpe+ZaF7CZQYLJtpogMwkylVpLdCgoczFRoJdmtoMDBTBGJxUwRicVM
OZSWljZv3jw7O1t2Q6hmY6acxcfHc9KKdGKmiMRipjzhpDD5h5lyKy8vD5uF
sSI/MFOe8EO25B9mikgsZqpahYWF/PASacdMVSsyMrJZs2ayW0E1BjOlBSet
SDtmikgsZsonvKstVYuZ8gmurQoLC2W3giyNmSISi5nyG9+4ILeYKf/wrrbk
CTPlN75ZQW4xU0RiMVP64cKK3w4mB2ZKv/j4eN7VlhyYKSH4TStyYKaIxGKm
xOJdbYmZEot3tSULZioxMZGXJ1RzWTBTISEhfGuaai4LZsrFpEmTauLb1Lyr
rW1ZPFM4CQwODq6hp4K8q609WTxTLnCIpqWlCWkPkUFqVqby8vJq6CcWauhQ
S36oWZlygQO1Rnzbgne1tZUananExERcbYmt0yA1IvskRI3O1PUff9m2pJLw
lyDySU3PlLPQ0NCQkBBDX0I/3tU24AVSpq7/+K0Aa45ZvKttwAuwTDlr2rRp
fHy8ma+oUU1835K0C+BMlVZyPLTmsEWBJ4Az5QzhCgoKstonhXhX24Bkk0xd
r3xzwGrDFu9qG5DskylnCBQnYckg9szUdevdnY9vXAQM22bKGa6zcLUl8ajm
XW0DCTN13Ro36LPauEl+Y6aqSkxMtP7nMaoqLy8vKyu7cuWK7IbYHTNVVWFh
ocRhS/uguWrVqtjY2LZt2zZp0qR27dq1VPXq1WvZsmXPnj0zMzPPnj1rdIPJ
BTNVrdDQUDM/j1HtXW337NkTERFx9913Y8c1a9YsPDx80qRJS5YsWbNmzbp1
65YvXz5z5sy+ffs+++yzSsTeeOON3Nxc09pPzFS1MGqY/O6Bpzf5sTwsLAz7
67HHHpswYcKxY8e811NRUTFv3rx27dqhSOvWrZE48W2lKpgpX3Xq1EnK+wlT
pky55ZZbMDB9+OGHvpbdtGnTyy+/jB3du3dvI9pGzpgpX+HczLRhy3FX23/8
4x/YTcOGDdNT2/z583HG+Kc//emLL74Q0z5yh5nSCcOWcRHDpRwujnDaVr9+
/VWrVumvEKeLrVq1atCgQUFBgf7ayC1mSo/S0lIc9sZ9xunq1avPPffcww8/
XFxc7GmdS5cuHThwYP369StXrlyxYsXatWuLiorKysq8VPvaa69hwNqxY4cB
TTYW+oXeoY/oKfqLXqPv2AKy2/UjzJRAiFhYWJjAiGGLNWrUyNOpWmFh4fTp
07t27RoeHt63b1+clCYkJPTv3z+80pgxY/Lz8z3V3KFDh1/96lffffedqKYa
DX1Bj5SuoY/oKfqLXuMhtgC2g3U+jcxMCYTd2rFjR1GfcRo9ejR2jXJi6XJX
W/znPHbsWBxOU6ZMwf/VJ0+ePO/kzJkz27dvx4VYt27dBg4cuGnTpqqVnz17
9je/+U3nzp2FNNVQaD96gb6gR+gXeufcWfQdWwDbAVsD2wRbRnZ7mSkDYcDC
f6f+ld29ezf2y7hx4xxLHHe1xS7D8TN16lQcP+e9+uabbxYsWICV3b5Rqdwh
LTk52b8WmgMtR/vRC/TFe2exNbBNsDK2j9w2M1PGwbDi92ecOnXq9Mwzz1Rd
vnjxYuWw8X6AOcP/7dHR0YmJiVU/thQTE9OwYcOLFy/610hDobVoM1qO9mvv
rPIfDraSxJYzU6bBuKDxxtTKCPLpp5+6LMeFOQ6YjRs3aj/GFEeOHMHpEy46
XCosLy8PCgr64IMPxPRQKLQWbUbLfe0stg+2EraVrJYzU6bB/7q42tKy5ptv
vtm6dWuXhUVFRThUEDRfjzFFcXGx2yNtyJAhTZo0EdNDcZT/PdBm/zq7evVq
FMcWk9J4ZkqWvEpVl586dQp7ZP78+S7Lhw0bhmsf/44xRW5uLo60EydOOFd7
7NgxvJz0r7o4QwvRTrRWT2exrXROkfuNmZIlNDQ0MjKy6vK5c+feeuutLnMu
GzZswGH25ZdfVnsszZo1y8t/7++//37V8882bdqEhYUZ2FUfoYVop55AAbYV
thi2m/ntZ6YsAiOFMrH19ttvv/TSSy7Pjho1KjU1VcuxhP/esUPfeecdt8nK
z8/HkVZRUeFc+dixY61z+oe2oYVop85MAbYYtpv5XWCmLKJZs2bKO94PPvjg
yJEjnZ/65ptvcJjt2rVL47HUokUL5VseVZNVXl7eo0cPlxkrXNRj5Wo/5W4O
tA0tRDv1ZwpbDNsNW8/kLjBT1lFaWoodgd2xfPnypUuXOpYXFBT06tVL+7Gk
DFVQp06dqslKTEx0Of0rKyvDahb5jhXahhbqD5QC2838TzYyU5Zy6NAh7A5l
4HC8g/Hxxx9/8MEHPh1LGKqUQFVN1ocffugyDsLdd989e/Zss3vrDtqGForK
FGrD1jO5C8yUpWzbtg27A9fXzh9wGjBgwCuvvDLLF9HR0bV+zJEsDAQdOnRI
/bH69eu/+eabqRaAtvk0o+3dtGnTUlJSTN6JzJSlbNmyBbvj5MmTjiUIF5bc
dtttd/nizjvvrFWFcs+KF154oUmTJkE/hqfwEkEWgLatXr1aVKZmzJhh/vjL
TFkKLquxOx555BHnD7dj3PH1EiMuLs5x7ucYpN5++22c/uFibfDgwS6ve++9
906ePNnUrnqAtqGFojKF7TZv3jyTu8BMSYeRyPGmAUYo5a4szud+OTk5ONK0
H0iopG7dulXTpDyL86tJkya5tOHWW29duHCheX32DG1L1TZroAW2G7aeyV1g
pqTDkISzNcfXf26//XaX9+X27t0bHh7+9ddfazyQMEg5zvSc06QYNmyYy6cm
lLvH47TTvD57hrahhUIChS2G7YatZ3IXmCnzIT64cPD01cWnn37a5fMVV65c
6dGjx5o1a7QcSBik7rjjDrdpgqNHj+Iwc/mS45IlS7D+hQsXjOuydmgbWoh2
6s8Uthi2m/k3EWWmTIATuaioKOclOL3x9NXF/v37N2/e3GUhRq5Ro0ZpOZAw
SLlNk2LRokVVL6YiIiJatGghsL86oYVop/5MYYtp/CKAWMyUQVx+66pZs2Ya
v1O/bt067BGXG1CgrMZvebh859fZl19+2bVr17Vr17q84v333y/r46ZuoYVo
p5YPN3qhfONDys8hMVNGUL4A5feX6HGQVx1N5s2bN3DgwNOnT/t9mCUlJY0Y
McKlWlzCo6nmX3R4h3aitX73FFsJ26rqZ/vNwUwJgRA5f7QbadJzgzIcUfXq
1bt8+bLzwosXLw4ZMmTq1Kn+HWZZWVn4f7vq7Ro6duzYvn17v5tqELQTrUWb
/essthK2lazvLzNTfnO+UY9ydxdRNSOSdevWrfr1W1y549pnxowZvh5j2dnZ
OETXr1/vUiGu4rH3zX+3WQu0Fm1eunSpr53F9sFWwraS1XJmyj+pqalBQUHG
1Y/r6zp16hw+fNixRDmTPHjwYExMzMiRI/fv36/lAPv222+Tk5OVb09UfZWW
LVt26tTJuF7opHwzBe1HL7R0FtsE/xFh+2ArSWw2M6UR/qt3Obsz+vr3ySef
7NChg/K38kOKyrzSqVOnJk+ejIMtIyPDy+0asNry5csjIyNxaeb2cik+Pr52
7dpe7sZpBWg52h8VFYW+oEeeOovtgK2BbYItg9XktpmZ8gSHsfM1Ef52+7Vc
43z++efYNbGxscpDx73IFJs2bUpISMBRpHyQ+7PPPsP5565duwoKCpYtWzZp
0iQ8hUNxxYoV165dq1o5iqDyqnd9sSC0H71AX5RfBULv0Ef0FP1Fr5WP2eMp
bA23dzI0HzPlSWJiYrNmzeS2AWeY2Dvjx4/3tMK+ffsWLVr0/vvv9+rVS7lH
a9euXXF5Pnfu3C1btly9etVtqVWrVt1000016zc+0Bf0CP1C75Rb7wJ6jb5j
C2A7yG7gfzFTDi73NbLCD8Hjv2IcM9hB+LfalS9evKjlsxBZWVk333yzpW5A
4Qf01Jq3Jbxu70y5/MYozu5SLfZD1SEhIaGhoUlJSdhHXbp00X8UjRo1ClX1
6NFDSPPILTtnCtdHAt8AN0JpJfyxcuXKxo0bP/jggx999JF/VW3fvl35wcSJ
EycKbSO5slWmrB8iL86cOfPuu+8qXyr06SarSNM///lPFHz++ee3bt1qXAtJ
EdiZyq7keIizO+v8ooonaKGXU9DPPvusU6dO2GUPPfTQgAED1qxZc+7cObdr
btu2bcyYMU8//TRWfuKJJxYsWGBUi+nHAi9TztNG8fHxJr8Brh8CVe37jcqs
zWOPPaZ88fD+++9/9tlnX3rpJYzCrVu3fvTRR2+55RYsb9KkidsPzZKhAixT
ykW90a9iHSdOnFi+fPm4ceOioqJwghcWFtazZ88RI0YsWrRo//79sltnUzU9
UxiJnM+USioJfxUi7WpcphAZ55kjl0zVULiGatq0qfWv9UiLGpcpXGvUuEuk
aim/tW2FWWbSz/qZ6tSpk/N7d/zPnCzOgpnKz893ee9Oz/f7rIyXfgHJgpkK
Dg4OgEskLdBT/I8huxUkmAUzZZ/LCpzH2qez9mHBTBHVaMyUyQoryW4FGYiZ
MllkZGRISIjsVpCBmCnz8RoqsDFTRGIxUybABVSrVq04PNkEM2UCZArXUMyU
TTBTRGIxU8bhwGRPzJRBECjHnWPJVpgp4yBQHKpsiJkiEouZEosfiyVmSiy7
3WSGqmKmxHLcOZZsi5kiEouZ0g/XUFFRUbJbQVbBTOmn3DmWp3ykYKaIxGKm
iMRipvzDO8eSJ8yUf3jnWPKEmSISi5nyCe8cS9VipnzCO8dStZgpn/AjslQt
ZopILGaqWt5/tJrIBTNVrcjIyGp/tJrIgZnSgtdQpB0zRSQWM+UW7xxLfmOm
3OKdY8lvzBSRWMyUMw5MpB8z5cA7x5IQzJQz3jmW9GOmiMRipvixWBKLmeKd
Y0ksZop3jiWxmCkiseyZKd45loxjz0zxzrFkHHtmisg4zBSRWPbJVElJCe8c
SyawT6YgPj6e11BkNFtlisgEAZ8p3jmWTBbwmeKdY8lkAZ8pfkSWTBbwmSIy
GTNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQW
M0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYzRSQWM0UkFjNFJBYz
RSSWyZkKCQmppcrLy3M867zcuVQtJ26Xo6BjISqsdrnzPWnxt9vlqamprVTO
vwMSGRlZ7XLnRrZy4nY5CjoWosJql6Nhbhvpabmexic4cbvc+UVLSkqqXe68
u/F3tcudb8qNOqtdblDj8ys5vyj+zle5XT527FgzM4W9madyvj2s83LnUnlO
3C53PjzQqXiVy8ZxLHfZg9Uud9mD1S53bmS8E7fLPTVST+NRNkTlkp1qlzs3
MsSJ2+Uuwa92uUvwq12uv/HNmjUz879i5+U89yMSiNdTRGIxU0RiMVNEYjFT
RGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNE
YjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0Ri
MVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIxU0RiMVNEYjFTRGIF
fKYSExPz8vLMf12yLTtkqrS01PzXJdsK+Ew5KykpSUhIYMTIULbKVHZ2drNm
zeS2gQKerTLlAsMWxywSzs6Z6lhJdiso0Ng5UxikMFTJbgUFGjtnykXz5s1x
wSW7FVTjMVMKjFnx8fEctkg/ZsotRIzvupN/mCm38vLygoODmSnyAzOlRWkl
2a2gmoGZ0iI0NJSTxaQRM6UFBqnCwkIzX/E///nPmjVrkpOTR4wYMbAS/sBD
LMRTZraEfMVM+aFTp06pqakGVb5nz55JkyaFh4fHxMQkJSV99NFH/6qEP/AQ
C/EUVsBqBjWAdGKm/BAfH2/E90fOnTs3Z84cRGbatGk7duw47wGewgpYDSuj
iPBmkE7MlH4YNfS/g3Hs2LFBgwYNGTJk+/btntLkDKthZRRBQSG9IFGYKZ1w
nXXXXXfpnCw+fvx4nz59pkyZgmxqCZQCK6MICqK4oN6QAMyUWH68646NP3To
0MmTJ2tPkzMURHET9iBpxEyJlZiYGBwc7FOR9PT02NjY06dP+5cpFERxVGJM
h8hnzJRwPr3rfvDgwfDw8M2bN/sXKAWKoxJUZVynSDtmylCRkZEYubysMHPm
zAkTJmgJTlxcXHJysqdnUQmqMq1f5AUzZajU1FQv3x8pKyvD+LJx40YtmSou
Lsaeql+/vttkoRJUhQrN7B25xUyZKS0tzfkdjC1btvTo0aOiokJLpuDtt9/G
zqpTp07VZKESVIUKJfaOFMyUaZCm4OBg58nizMzMMWPGaAyUY6hSVE0WqkKF
8vpHP2CmJEIKUlJStGdKGapuu+02t8lCVVOmTJHdJ2KmpBk3btwtt9zy0EMP
tfTFH//4x1pVKMnq3r37H/7wh3379snumd0xU7LgJLBBgwYdOnTo7YtXX321
aqDwb4sWLcLDwxs3boy/IyIiTpw4Ibt/9sVMmcnlI0zTp0/38va4W8iOEiLn
NOXm5uIpVIUK586di7EPTw0ePJifsJWCmTJNaWkpNrXzjHBWVtaIESO0BwrZ
cZsmBapChUrNEydOrFev3t13340zTEndtS9mykwu49SuXbtwwvbtt99qH6SU
TLmkCVAJqkKFjsqVjxH+5Cc/eeCBBzCEmd1VG2OmDBUZGRkfH+/p2cuXL/fs
2XPVqlXaB6mqaVKgElSFCl1e4j//+Q/agIJ/+MMfFi9ebGxvqRIzZajU1FTv
315cuHBhQkKClkzFxcW5TZMClaAqT6/yxRdfhIWFYUc/99xzSJ/4fpITZkos
nN359LX6b775BudsOTk5WmLlCYqjElTl/bU+//zzV155Bbu7U6dO/MSFcZgp
sRCokJAQn4qsWLGiW7duBw4c8C9QKIjiqETjy3366acYrbDTQ0ND9+/f73MP
qTrMlH767wg9derUwYMHf/nll74GCkVQEMV9fUVcW+EKC7seV1u8EZNYzJRO
CJTLO+R+wPYfPXr0oEGDiouLtQcKK6MICvq9+2bPnv3AAw/85Cc/GTp06IUL
F/R0gRyYKf2E3Prv4sWLSUlJuCxatmyZlkBhNayMIiio86XHjx9/zz331KtX
b8KECfo7QsyUH8LCwgy6v9+qVatwcRQbG7t06VKMgFWjhIV4CitgNYHv4J07
d27IkCF16tR58MEH58yZI6pae2Km/JCYmGjE/f0UZ8+ezc7O7tevH4ahAQMG
KF/gVb4OjIdYiKewAlYT/tInTpyIiIjA8fD4449//PHHwuu3CWZKC4wO5v/c
2+HDh1evXr1gwYJZlfAHHmKh0a+Ly7R//OMfOCpat26NVzT65QIPM6VFfHy8
3X75d/Pmzegyjo1XX31169atsptTkzBTnvDHcSA3NzckJARHSJcuXQ4cOCC7
OTUDM+UWLpewWfhTpIrMzMzmzZtjg0RFRVX7aQ1ipjwx7l2IGgrXdPfdd99t
t92WkJCg/w38AMZMOYSFhTFH1Ro7duzPf/7z+vXre79voZ0xUw6RkZEm/3Bb
DVVeXj5o0KDatWs//PDDKSkpsptjOXbOFC6XODD57csvv+zZsycOnieeeMLx
/WK6bu9MhVaS3Yqabe/eve+88w4OobZt265du1Z2cyzBbpniO+RG2LRp00sv
vYQDqXPnztu3b5fdHMlslans7OygoCDGyiArV6589tlncTi9++67Jnzew7Js
lSmkiRdQRlu4cOFjjz2Ggyo6OvrUqVOymyNBwGcqMjKSU7fmmzFjRnBw8E9/
+tPhw4dfunSp2vW//fZbnDSuWrVq6dKlK1asWL9+/cGDB69evWpCU4UL+Eyl
pqbyHXJZRo8ejZPthg0bTp482e0K5ytvppGQkBAeHt61a9dBgwaNGDECD/v2
7YslPXr0SE5O3rt3r8nN1ingM0VynT17duDAgTfddNOvf/3rtLQ056cwKvXq
1QvxyczM3LNnz7lz55y/KXbixAmcqE+cOBHhQiT//e9/y+qCr5gpMsHx48e7
d++OI+1Pf/oTzu7Ky8sRE4QFf7tEqSrEbfz48VgZJ4Sy+6EJM0WmKSoqeuut
t3C8Pfzww8OGDfPpVlFZWVmI1cqVK2V3onrMFJnpypUr7733Hi6dTp06pT1Q
CpwrIlb5+fmyO1ENZorMlJGR0b9/f1wr+Roo59EKZ5Ky++ENM0WmwZURErFl
yxb/AqWYMGHCpEmTZHfFG2aKTIM4JCUlVZuakydPzpo1y9Oze/fuRTART9m9
8YiZInMcO3YMWSgqKtIyGL399tuNGjXy9IN3GKdmzpwpu0MeMVNkjmXLlg0e
PFhLoM5X3mJX+aUtxy+AO8vPz+/WrVvVHwayCGaKzIETv/T0dI2ZUoaq2rVr
O34B3DlZODnEkPfFF1/I7pN7zBSZIzo6evXq1doz5RiqHD+36pysmJgYy34c
mpkiE1y9evXNN9+Mi4tL8sVTTz118803u03W8OHDcTIpu1vuMVNkAlz7tG7d
Oigo6G5f1K1bt5Y7d9xxx2uvvWbZL+wzU2SOHj16bNy4Ufu5H/zyl790GaRu
v/12DHa4nhoyZEhOTo7sPrnHTJE5hg4dunTpUu2BmjVrlts0Kc8ioZ9//rns
PrnHTJE55s6dO3nyZF8HqappOl/59kV4eLhlf96RmSJzFBQUdO3a9cyZM9oH
qappUixevBjnfrI75BEzRea4dOlSr169cBGkJVO/+93v3KZJ0a9fP+2/CW4+
ZopMM2LEiL/97W9lZWXeA3Wykqdnkabu3buXl5fL7o1HzBSZAKd8yk1rH3jg
gYyMDC1DlVuHDx/u1q2bxb+ZyEyR0WbMmHHPPfc0bdp03rx527ZtCw8PX7Vq
lR+BQjDff//9iRMnyu5QNZgpMs6GDRtatWqFA2zAgAGOj7xilEGsPv30U58C
9fXXX48ZM2bw4MFIltxOVYuZIiOUlpb26tULh1aHDh2q3gtOiRWGLVwWaQkU
RrfY2Njhw4fXiF+UY6ZIOOVkLzg4GKnxtA5iEhMT079/fxyBCKCnNO3du3fm
zJkIYEpKyvfff29mL/zGTJFAzid71d5+9sKFCx9//HHPnj27des2ZcqU5cuX
FxQUYFDbvn372rVrkcf4+HikaezYsbt27TKn/UIEfKZCQ0Ozs7PNf127OXv2
rONkb+fOndoLXrx4cdOmTbNnz8a1EsIVXikqKgpRwo47cuSIcW02SMBnijdL
NwFOz+rVq4eTvYyMDJ1VIWKW/QKvRgGfKWd5eXk4M+Fv5Qi0cePG5557DocQ
roxqyvWO0WyVKYxZOEWX24aAgZO9iIgIHDwvvvjijh07ZDfHQmyVKRd5lWS3
okaaNWvWL37xi3vvvTc9PV12WyzHzpnCmMXf8/XVpk2bnn/+eRwz/fr1w7WP
7OZYkZ0z5YLvZnhXVlbWu3dvHC3t27fnj/Z6wUw5BAUFpaamym6FRSUnJ9ev
X79JkyYuvyFFVTFTDhin+JZgVQUFBa1bt8ZBEhMTY8JxEgCYKbeQr1atWtn8
bLC8vDwyMhKHx5///Odt27bJbk6NwUy5hTThcJLdCplmz57doEGDxo0b83zY
V8yUFoWFhfZ5133z5s1t2rTBUREdHX3hwgXZzal5mCktEhMTQ0JCpLz0+fPn
v62EP4x+rYqKiqioKBwP7dq127p1q9EvF6iYKT8Y/VbG999/v2HDhunTp8fE
xIQ7wUMsxFNGfApozpw5DRs2bNSoUUpKivDKbYWZ8kPTpk0N+ozT1atXly1b
FhER0aNHD8Rn1apVu3btOlwJf+AhFuIprLB06VKsLORFt2zZ0rZtWxwGffv2
NWE0DHjMlB9KKgmvtri4ePDgwX369Pnkk0+8fE0PT2EFrIaVUUTPK547dw71
4AB44YUXLHtb1xqHmdIJR3inTp30R2zjxo04u5s1a5Zy6VStU6dOYWUUQUH/
XnHu3Lm/rIQ/dDaenDFTOiFToaGhOq+wcPaFdHz88cda0uQMRZRfnfbp5TAk
YWBSTvYwVOlpOVXFTImFAcvXd92PHz/etWvXzMxMXwOlQEHECpVoeS2sjxwp
J3u+JpE0YqbESk1NDQ4O9qnIhEr+BUqh1FDtC6WkpPBkzwTMlKGqPSfEaRhG
mQMHDlQbHC+3Oz548CAq8fImw9atW5WTvT59+vBkz2jMlKFatWrl/TNOY8aM
mTNnjpbBKC4u7p133ikuLnb7LCpBVVXrv3DhgnKy17ZtW57smYOZMhQur6re
MdJB+f303bt3a8kUVlZ+i/PNN9+smixUgqqwjnP9ONlr1KhRw4YNkTjj+0o/
YKbMFBYW5hyxdevWKdOsGmGows5Sfja6arJQFSpUat62bVu7du2wWlRUVEVF
haTu2hQzZRrlXXfnmaz09PTExETtmcIwdPvttzt+jtMlWagKFWJXRkdH46k2
bdps3rxZXnfti5mSBRHr0aNHamrqWV8MHDhQSVPVZGVkZAwYMKBx48YNGjSY
PXu27P7ZFzMly/z582+55ZZaItx0003KPcHeeeedyMhIK//emR0wUxJ17ty5
X79+S3yh3D/ZmeNXpDE2JSQkyO4TMVOmSktLc755O1KQlJSk/XrqvPpr7C5p
UqauUBVP+ayAmTITTswSExMdD1euXDlo0CDtgVJ+jb1qmhSoyuI/ymkTzJTR
vMxPKZ9/OHr0qE+DVNU0ASpBVajQzK6RW8yUoTAqef/4H9Lx0UcfaRyk7rzz
zqppUqASPGVWt8gbZspQpZW8rJCTk4MTwu+++05Lpjx95A/FUQl2pWn9Ii+Y
KbFKSkqaNm2q/SuKV65cGTBgwLx587QMVZ6gOCpBVUb2jLRipoTD+Z5PX1Hc
unUrLoXWr1/vX6BQEMV5myPrYKb0S0tL03n3P8fXdX0NlOMLwoK6QgIwU/p1
7NhR/81aFyxYgHTk5uZqD9SqVatQBAVFdIKEYab8Y8R9k1auXImMTJkyZf/+
/d7ThBWwGlbmhJQFMVN+iIyMbNasmRE1HzhwYPz48QjLxIkT16xZg+Q6RwkP
sRBPYQWshpWNaAPpxEz5odp3yHUqKiqaPXt2REQEstO9e/eYSvgDD7EQT2EF
416ddGKmtCgsLGzevLn5v051/Pjxbdu25VfCHxpvjkRyMVNaIE3x8fH8xTfS
gpnyJC0tzea/6Ub+YaY8adasmfP3Mog0YqaccWAi/Zgph9DQ0I4dO8puBdV4
zJQDf3eehLBzpvLy8lq1aiW7FRRo7JwpDEx8h5yEs1um0tLSGCIylK0yhTQF
Bwfr/F4GkXd2yBQHJjJTwGcqJCQkNDTU/Ncl2wr4TBUWFnKcIjMFfKaITMZM
EYnFTBGJxUwRicVMEYnFTBGJxUwRicVMEYnFTBGJxUwRicVMEYllZqaCg4P/
pvqr6k3VG6rXVZ1Vr6leVb2i6qTqqHpZ9ZLqL6oOqhdV7VV/VrVTvaBqq2qj
aq16XvWcqpUqRPWs6hnV/6ieVrVUtVA9pfqT6knVE6rHVX9U/UH1e1VzVTPV
Y6rfqX6relT1iOo3ql+rfqV6WPWQ6kHVA6r7VfepmqqCVfeqmqgaqxqpfqlq
qGqgqq/6haqe6h7V3aqfq36mClLdpbpTdYeqrup21U9V/091m+rWW2+95ZZb
TMsUtpuSGkeOHMlyZO0t1duqd1R/V/1DFaoKU3VR/VP1rup/Ve+pwlVdVd1U
3VU9VD1VvVQRqt6qSFWUqo+qrypaFaPqp+qvGqAaqIpVxakGqQarhjgZqopX
JaiGqYarRqjeV32gGqkapRqtGqMaqxqnGq+aoJqoSlRNUk1WTVFNVU1TJamm
q2aoZqpmqZJVs1VzVHNVKapUVZoqXZWhmqear1qgWqhapMrMzMRu4rkfkUC8
niISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5kiEouZ
IhKLmSISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5kiEouZIhKLmSISi5ki
EouZsrKvvvpq586dGyrhDzyU3SKqHjNlQfv27UtJSYmKilJuk6vcyVb5Gwvx
FFaQ3UbyiJmylMOHD0+cOBHZGT9+/KpVq/Dw3Llz5yvhDzzEQjyFFbAaHspu
L7nBTFlHTk4OwjJp0iQMQ+e9wgpYDSujiOxWkytmyiIWLVqkZMR7mpxh36EI
CspuO/0IM2UFWVlZSEdBQYH2QCk2b96Mgiguuwf0X8yUdNu2bUMu8vLyfA2U
AgVRHJXI7gf9gJmS6+rVqwMHDkxPT/cvUAoURyWoSnZv6AZmSq7c3NzevXuf
Pn1aT6ZQHJWgKtm9oRuYKbkGDRq0ePFiPYFSoBJUJbs3dAMzJdGhQ4dwKXTk
yBH9mUIlqAoVyu4TMVMy5eTkYHDRHygFquJ0lRUwUxLNnj07KSlJVKZQFSqU
3SeyV6Z27ty5Z88ex8Njx46tX7/e8bC8vByX+RcuXHAsWbt2rfPHVoUXHzp0
6IIFC0RlClWNHz9ewGYifWyVqU6dOoWFhTkeJiYmNm3a1PGwsLAQm6KkpMSx
JCgoKDU11bjif//73z/88ENRmcK5X6NGjcrKynRuJdLJVpn6vpLj4eXLl507
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
J6TkYqYkSk9PnzRpkqhMoapu3bpxQkq6gM/UxYsXnXt3+fLlc+fOOR5eu3at
oqLi6tWrjiU4OC9dumRO8YkTJ2ZkZIjK1Jw5c4KCgjghJV3AZyosLMz5HbDU
1FQceI6HJSUl6H5hYaFjSdOmTRMTE80pPmrUqA8//FBUpoYMGdK4cWNkXM/m
Iv0CPlP79u3btWuX4+HJkyfz8/MdD9Hx1atXO0+Mbty48fjx4+YUHz9+/IIF
C0RlClWhQj3bioQI+ExZGc7WkpKSRGUKVaFC2X0iZkqmnJycuLg4UZlCVahQ
dp+ImZJJ+fzDkSNH9AcKlSifx5DdJ2KmJBs0aJDfn551hkpQleze0A3MlFy5
ubkRERGnTp3SEygURyWoSnZv6AZmSq5r167Fxsamp6fryRSKoxJUJbs3dAMz
Jd327dtxKaTcucUPKIjiqER2P+gHzJQVKF/XLSgo8DVQKKJ8QVh2D+i/mCmL
yMzMRDpycnK0BworowgKym47/QgzZR25ubnISGJi4t69e72nCStgNazM9yUs
iJmylCNHjihhGTduHPJy6NChiooKJUf4Aw+xEE8p0cPKsttLbjBTFlRcXJya
mtqnTx/H7WcdN6TFQjyFFWS3kTxipqzsxIkTu3bt2lQJf+Ch7BZR9ZgpIrGY
KSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgp
IrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCki
sZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKxmCkisZgpIrGYKSKx
mCkisZgpIrFMzlQ0kQ2YlqlniGzDhEwREREREREREREREREREREREREREREF
hv8P6cZMKg==
     "], {{0, 447.}, {170.4, 0}}, {0, 255},
     ColorFunction->RGBColor,
     ImageResolution->120],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{142.57046979865774`, Automatic},
   ImageSizeRaw->{170.4, 447.},
   PlotRange->{{0, 170.4}, {0, 447.}}]}]], "Output",
 CellChangeTimes->{
  3.8833914331970444`*^9, 3.8833915953331337`*^9, {3.883398134697877*^9, 
   3.8833981415551*^9}, 3.883400014226659*^9, 3.8834849539162245`*^9, 
   3.8834867828433614`*^9, 3.883487454006133*^9, 3.8834887487940845`*^9, 
   3.8834924029466667`*^9, 3.8834924842660875`*^9, 3.8834925231464915`*^9, {
   3.8834926252137966`*^9, 3.88349263479486*^9}},
 CellLabel->
  "Out[1607]=",ExpressionUUID->"dfee5166-c85b-42e8-8125-21615bf87079"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"\"\<We define that it occures on PP with index 1 ({x1})\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PPind", "=", "1"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Create PSB on all incedent IG information storage \
locations\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"IGhost", "=", 
      RowBox[{"S2N", "[", 
       RowBox[{
        RowBox[{"PPset", "[", 
         RowBox[{"[", "PPind", "]"}], "]"}], "[", 
        RowBox[{"[", "i1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"IGset", "[", 
         RowBox[{"[", "IGhost", "]"}], "]"}], "[", 
        RowBox[{"[", "2", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"N2SPP", "[", "PPind", "]"}], "}"}], ",", 
           RowBox[{"{", "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"N2SPP", "[", "PPin", "]"}], "}"}], ",", 
           RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"PSBinSet", ",", "IGhost"}], "]"}], ";"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i1", ",", 
      RowBox[{"Length", "[", 
       RowBox[{"PPset", "[", 
        RowBox[{"[", "PPind", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Split clones PP preserving all IG connections with one new IG \
connection for IG between PP and SE\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"PPset", ",", 
    RowBox[{"Append", "[", 
     RowBox[{
      RowBox[{"PPset", "[", 
       RowBox[{"[", "PPind", "]"}], "]"}], ",", 
      RowBox[{"N2S", "[", "IGin", "]"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"PPinSet", ",", "PPin"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"IGset", ",", 
    RowBox[{"{", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGin", "+=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PPin", "+=", "1"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Add additional IG to other PP\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AppendTo", "[", 
    RowBox[{
     RowBox[{"PPset", "[", 
      RowBox[{"[", "PPind", "]"}], "]"}], ",", 
     RowBox[{"N2S", "[", "IGin", "]"}]}], "]"}], ";"}], "\[IndentingNewLine]",
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Add SE between two PPs\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"SEset", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"N2S", "[", 
       RowBox[{"IGin", "-", "1"}], "]"}], ",", 
      RowBox[{"N2S", "[", "IGin", "]"}]}], "}"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"SEinSet", ",", "SEin"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AppendTo", "[", 
   RowBox[{"IGset", ",", 
    RowBox[{"{", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEin", "+=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IGin", "+=", "1"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.883046384485537*^9, 3.8830463899314804`*^9}, {
   3.8830465831691685`*^9, 3.883046589420432*^9}, {3.883046994760198*^9, 
   3.8830469968487234`*^9}, {3.883047035743174*^9, 3.88304705551692*^9}, {
   3.8830471731126413`*^9, 3.883047299127936*^9}, {3.8830473825706263`*^9, 
   3.883047406936191*^9}, {3.8830479730400486`*^9, 3.8830479857926736`*^9}, {
   3.8830480172994213`*^9, 3.883048078238745*^9}, {3.883048138933287*^9, 
   3.8830482191474004`*^9}, {3.883048286541933*^9, 3.8830483678801484`*^9}, {
   3.8830485097122*^9, 3.8830485135325317`*^9}, {3.883050006027561*^9, 
   3.883050022055932*^9}, {3.883055795869706*^9, 3.883055819904147*^9}, {
   3.8830569841915083`*^9, 3.8830569939457235`*^9}, {3.883057302491521*^9, 
   3.8830574751771927`*^9}, 3.883057611989069*^9, {3.883057642059467*^9, 
   3.8830576598990965`*^9}, {3.883057710353177*^9, 3.8830577965411425`*^9}, {
   3.883057906005818*^9, 3.8830579171139545`*^9}, {3.883057954229063*^9, 
   3.883057959100968*^9}, {3.883218856161002*^9, 3.8832188812922974`*^9}, {
   3.8832215543229647`*^9, 3.8832215890476046`*^9}, {3.8832216216194134`*^9, 
   3.883221647690301*^9}, {3.883221712402708*^9, 3.883221893457559*^9}, {
   3.883221941485878*^9, 3.8832219420652742`*^9}, {3.8832219883352175`*^9, 
   3.883221991002206*^9}, {3.8832221387260113`*^9, 3.883222237969822*^9}, {
   3.8833902987896547`*^9, 3.883390323144129*^9}, {3.883391588264436*^9, 
   3.883391589927137*^9}},
 CellLabel->
  "In[1608]:=",ExpressionUUID->"fd2f3405-64e7-45ec-a567-26200653278b"],

Cell[CellGroupData[{

Cell[BoxData["IGset"], "Input",
 CellChangeTimes->{{3.8832219057426357`*^9, 3.8832219075121627`*^9}},
 CellLabel->
  "In[1626]:=",ExpressionUUID->"fd857bb2-eea2-4ac2-9a79-a0030193ca4b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "p1", "}"}], ",", 
       RowBox[{"{", "s1", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "p1", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "p3", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}]}], "}"}], "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s2", ",", "s3"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s3", ",", "s4"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s4", ",", "s5"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"s5", ",", "s6"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "p2", "}"}], ",", 
       RowBox[{"{", "s6", "}"}]}], "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883221908365012*^9, 3.883221953840973*^9, 3.8832221072395163`*^9, 
   3.8833836722280426`*^9, {3.8833838017785063`*^9, 3.883383816319216*^9}, 
   3.883384030969079*^9, 3.883385436957607*^9, 3.8833862330931826`*^9, 
   3.8833914332871447`*^9, 3.883391595432996*^9, {3.883398134834034*^9, 
   3.883398141686677*^9}, 3.883400014385583*^9, 3.8834849540431995`*^9, 
   3.8834867829590836`*^9, 3.8834874541197014`*^9, 3.883488748870283*^9, 
   3.883492403015812*^9, 3.883492484561528*^9, 3.883492523281705*^9, {
   3.8834926253621497`*^9, 3.883492634966942*^9}},
 CellLabel->
  "Out[1626]=",ExpressionUUID->"3c5b22d9-7947-4798-997f-8930c9afc071"]
}, Open  ]],

Cell["\<\
Ok that\[CloseCurlyQuote]s the split without creating a PSB, let\
\[CloseCurlyQuote]s see what it looks like as a hypergraph.\
\>", "Text",
 CellChangeTimes->{{3.8830483878700433`*^9, 
  3.8830484359238462`*^9}},ExpressionUUID->"2735cc49-377f-4249-9970-\
2dcbf0afe558"],

Cell[CellGroupData[{

Cell[BoxData["PPset"], "Input",
 CellChangeTimes->{{3.8830486341662083`*^9, 3.883048635226615*^9}},
 CellLabel->
  "In[1627]:=",ExpressionUUID->"8fe0c1e5-484b-497f-8841-e5d3836ffb73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "x8"}], "}"}], ",", 
   RowBox[{"{", "x6", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x1", ",", "x7"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.883048635784011*^9, {3.883218848718835*^9, 3.8832188752344847`*^9}, 
   3.8832219755864677`*^9, 3.883383672262043*^9, {3.883383801822486*^9, 
   3.883383816355032*^9}, 3.883384031004079*^9, 3.883385436992608*^9, 
   3.883386233125179*^9, 3.8833914333514395`*^9, 3.883391595519452*^9, {
   3.883398134916483*^9, 3.8833981418111477`*^9}, 3.8834000144925966`*^9, 
   3.8834849541510057`*^9, 3.883486783040477*^9, 3.8834874542058706`*^9, 
   3.8834887489169855`*^9, 3.8834924030583706`*^9, 3.8834924847127914`*^9, 
   3.8834925235685225`*^9, {3.8834926255719533`*^9, 3.8834926351442375`*^9}},
 CellLabel->
  "Out[1627]=",ExpressionUUID->"e03c42d5-f940-4fe4-b64b-8ac6372c5e59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}], "[", 
  RowBox[{"mapS2N", "[", 
   RowBox[{"Join", "[", 
    RowBox[{"PPset", ",", "SEset"}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8830484385030274`*^9, 3.8830484419142723`*^9}, {
   3.8830485550838346`*^9, 3.8830485974682455`*^9}, 3.88305785030033*^9},
 CellLabel->
  "In[1628]:=",ExpressionUUID->"38fe0ab1-d4bb-42f5-b816-752e7b27b095"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.2548481111111111, 0.35357422222222223`, 0.5389008888888889], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{11.135916445029869`, 0.32131804999365204`}, {
        10.518249118079574`, 1.2658639964735294`}, {9.918249118079572, 
        1.2658639964735294`}, {9.918249118079572, 0.6658639964735296}, {
        10.535916445029867`, -0.27868195000634793`}, {
        11.599156558834768`, -0.3}, {12.199156558834769`, -0.3}, {
        12.199156558834769`, 0.3}}, SplineClosed -> True]]}, 
     {RGBColor[
      0.2704347777777778, 0.43505644444444447`, 0.35968022222222223`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.6314438484891871, 0.837592915725381}, {
        1.2314438484891872`, 0.837592915725381}, {1.2314438484891872`, 
        1.437592915725381}, {0.6314438484891871, 1.437592915725381}}, 
        SplineClosed -> True]]}, 
     {RGBColor[
      0.33311066666666667`, 0.5032283333333333, 0.26154733333333335`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{11.182336985515967`, 2.1777182113771913`}, {
        10.582336985515965`, 2.1777182113771913`}, {9.918249118079572, 
        1.2658639964735294`}, {9.918249118079572, 0.6658639964735296}, {
        10.518249118079574`, 0.6658639964735296}, {11.166467138239314`, 
        1.5559275328076725`}, {11.648175131474428`, 1.5379576608604428`}, {
        12.24817513147443, 1.5379576608604428`}, {12.24817513147443, 
        2.137957660860443}}, SplineClosed -> True]]}, 
     {RGBColor[0.5090482222222222, 0.6077703333333333, 0.25180933333333333`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{9.530211265207946, 1.3000819029914272`}, {
        8.584695999790616, 1.3538545222942866`}, {7.984695999790616, 
        1.3538545222942866`}, {7.984695999790616, 0.7538545222942865}, {
        8.930211265207944, 0.7000819029914271}, {9.918249118079572, 
        0.6658639964735296}, {10.518249118079574`, 0.6658639964735296}, {
        10.518249118079574`, 1.2658639964735294`}}, SplineClosed -> True]]}, 
     {RGBColor[0.7294032222222222, 0.7249631111111111, 0.2860526666666667], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{7.066298744521883, 1.2470509659609879`}, {
        6.135628171822289, 1.2433853843120861`}, {6.135628171822289, 
        0.6433853843120863}, {6.735628171822289, 0.6433853843120863}, {
        7.666298744521883, 0.647050965960988}, {8.584695999790616, 
        0.7538545222942865}, {8.584695999790616, 1.3538545222942866`}, {
        7.984695999790616, 1.3538545222942866`}}, SplineClosed -> True]]}, 
     {RGBColor[0.8562609999999999, 0.742794, 0.31908333333333333`], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{5.23459808980719, 1.0178392973892674`}, {
        4.303524163170672, 0.9951790256239321}, {4.303524163170672, 
        0.3951790256239322}, {4.903524163170672, 0.3951790256239322}, {
        5.83459808980719, 0.41783929738926734`}, {6.735628171822289, 
        0.6433853843120863}, {6.735628171822289, 1.2433853843120861`}, {
        6.135628171822289, 1.2433853843120861`}}, SplineClosed -> True]]}, 
     {RGBColor[0.8272665555555555, 0.5658831111111111, 0.3086672222222222], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{3.9297388799272754`, 0.9884137502801548}, {
        3.061668867450332, 1.1919638557179708`}, {2.4616688674503324`, 
        1.1919638557179708`}, {2.4616688674503324`, 0.5919638557179707}, {
        3.3727330251789485`, 0.3783322993927087}, {3.972733025178948, 
        0.3783322993927087}, {4.903524163170672, 0.3951790256239322}, {
        4.903524163170672, 0.9951790256239321}, {4.303524163170672, 
        0.9951790256239321}}, SplineClosed -> True]]}, 
     {RGBColor[0.7390852222222222, 0.2704317777777778, 0.23901633333333333`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.1195487571093765`, 1.1901039002701501`}, {
        1.2314438484891872`, 1.437592915725381}, {0.6314438484891871, 
        1.437592915725381}, {0.6314438484891871, 0.837592915725381}, {
        1.5310300791544618`, 0.5869043849884683}, {2.1310300791544616`, 
        0.5869043849884683}, {3.061668867450332, 0.5919638557179707}, {
        3.061668867450332, 1.1919638557179708`}, {2.4616688674503324`, 
        1.1919638557179708`}}, SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{12.05537782351069, 0.9184924131134413}, {
        11.599156558834768`, 0.3}, {11.599156558834768`, -0.3}, {
        12.199156558834769`, -0.3}, {12.863931584302623`, 
        0.6012256584997839}, {12.863931584302623`, 1.2012256584997838`}, {
        12.24817513147443, 2.137957660860443}, {11.648175131474428`, 
        2.137957660860443}, {11.648175131474428`, 1.5379576608604428`}}, 
        SplineClosed -> True]]}}, {
     {RGBColor[0.2548481111111111, 0.35357422222222223`, 0.5389008888888889], 
      Thickness[0.01], 
      BSplineCurveBox[{{10.218249118079573`, 0.9658639964735295}, {
       10.835916445029868`, 0.021318049993652055`}, {11.899156558834768`, 0.}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[
      0.2704347777777778, 0.43505644444444447`, 0.35968022222222223`], 
      Thickness[0.01]}, 
     {RGBColor[
      0.33311066666666667`, 0.5032283333333333, 0.26154733333333335`], 
      Thickness[0.01], 
      BSplineCurveBox[{{10.218249118079573`, 0.9658639964735295}, {
       10.882336985515966`, 1.8777182113771913`}, {11.948175131474429`, 
       1.8379576608604429`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.5090482222222222, 0.6077703333333333, 0.25180933333333333`], 
      Thickness[0.01], 
      BSplineCurveBox[{{10.218249118079573`, 0.9658639964735295}, {
       9.230211265207945, 1.0000819029914272`}, {8.284695999790616, 
       1.0538545222942866`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.7294032222222222, 0.7249631111111111, 0.2860526666666667], 
      Thickness[0.01], 
      BSplineCurveBox[{{8.284695999790616, 1.0538545222942866`}, {
       7.366298744521883, 0.9470509659609879}, {6.435628171822289, 
       0.9433853843120862}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8562609999999999, 0.742794, 0.31908333333333333`], Thickness[
      0.01], BSplineCurveBox[{{6.435628171822289, 0.9433853843120862}, {
       5.53459808980719, 0.7178392973892673}, {4.603524163170672, 
       0.6951790256239322}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8272665555555555, 0.5658831111111111, 0.3086672222222222], 
      Thickness[0.01], 
      BSplineCurveBox[{{4.603524163170672, 0.6951790256239322}, {
       3.6727330251789483`, 0.6783322993927087}, {2.7616688674503322`, 
       0.8919638557179708}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.7390852222222222, 0.2704317777777778, 0.23901633333333333`], 
      Thickness[0.01], 
      BSplineCurveBox[{{2.7616688674503322`, 0.8919638557179708}, {
       1.8310300791544618`, 0.8869043849884684}, {0.9314438484891872, 
       1.137592915725381}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{11.948175131474429`, 1.8379576608604429`}, {
       12.563931584302622`, 0.9012256584997839}, {11.899156558834768`, 0.}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      TagBox[{
        TagBox[DiskBox[{10.218249118079573, 0.9658639964735295}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], 
        InsetBox["1", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{8.284695999790616, 1.0538545222942866}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], 
        InsetBox["2", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{6.435628171822289, 0.9433853843120862}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], 
        InsetBox["3", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{4.603524163170672, 0.6951790256239322}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], 
        InsetBox["4", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[DiskBox[{2.7616688674503322, 0.8919638557179708}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$5"], 
        InsetBox["5", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"], 
      TagBox[{
        TagBox[DiskBox[{0.9314438484891872, 1.137592915725381}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$6"], 
        InsetBox["6", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$6"], 
      TagBox[{
        TagBox[DiskBox[{11.948175131474429, 1.8379576608604429}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$7"], 
        InsetBox["7", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$7", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$7"], 
      TagBox[{
        TagBox[DiskBox[{11.899156558834768, 0.}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$8"], 
        InsetBox["8", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$8", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$8"]}}]}]], "Output",
 CellChangeTimes->{
  3.883048564448122*^9, 3.883048597871956*^9, 3.883057854100274*^9, {
   3.883218848796692*^9, 3.8832188753263392`*^9}, 3.8832219784999437`*^9, 
   3.883373381965086*^9, 3.883383672339044*^9, {3.8833838019005213`*^9, 
   3.8833838164322157`*^9}, 3.8833840310750785`*^9, 3.8833854370659485`*^9, 
   3.883386233199177*^9, 3.883391433500094*^9, 3.8833915958053026`*^9, {
   3.8833981351828365`*^9, 3.8833981421774006`*^9}, 3.8834000147577586`*^9, 
   3.883484954369383*^9, 3.8834867833197107`*^9, 3.883487454449703*^9, 
   3.88348874900889*^9, 3.8834924031474686`*^9, 3.8834924848763065`*^9, 
   3.883492523814435*^9, {3.8834926262003813`*^9, 3.8834926353602066`*^9}},
 CellLabel->
  "Out[1628]=",ExpressionUUID->"74988ad3-2ae8-48e6-a41c-5a26b95ab6e6"]
}, Open  ]],

Cell["\<\
Ok that looks good to start off with. Now we need to make a PSB that \
propagates through the system linked to the IG symbol.\
\>", "Text",
 CellChangeTimes->{{3.8830486911646576`*^9, 3.883048695926139*^9}, {
  3.8830499667073374`*^9, 3.883049993052312*^9}, {3.88305568705732*^9, 
  3.8830557039393115`*^9}, {3.883056280298902*^9, 
  3.8830562807808733`*^9}},ExpressionUUID->"1f938717-d498-4cdd-a9d0-\
f62708b33cff"],

Cell[TextData[{
 StyleBox["Note about order of computation:",
  FontSize->18,
  FontWeight->"Bold"],
 StyleBox["\n",
  FontWeight->"Bold"],
 "Let us consider the order of operation.\n\nWe have duplications and \
reductions, of themselves, if we were performing only these operations, since \
in one TS there is no overlap since each SE can only perform one action, I \
argue, and will later prove both analytically and theoretically that the \
order of duplication and reduction has ",
 StyleBox["no effect ",
  FontWeight->"Bold"],
 "on the resultant graph and information structure.\n\nA split may occur \
between reductions and duplications and since this does not change any \
adjacent SEs only adjacent IGs it does not matter the order that this takes \
and we can partition the order of duplications and reduction, and splits. It \
makes mores sense to perform splits after duplications and reductions since \
then no change in the index of the host IG for the PSB will need to be \
altered after it is created in the same TS, saving computation.\n\nPSB \
propagation and information propagation are likely to occur simultaneously, \
however separate from element actions. One can imagine the actions occurring, \
and then the propagation second. This isomorphic with propagation and then \
actions, it is simply a choice of where we consider the TS to begin and end.\n\
\nSo we propose the following computational order:\n\nStart TS |(",
 StyleBox["SE actions -> PP splitting )-> PSB propagation|",
  FontWeight->"Bold"],
 " End TS",
 StyleBox["\n\n",
  FontWeight->"Bold"],
 "I argue that order of SE actions and PP splitting does not matter since \
there is no overlap in a given TS. So we could also do (PP splitting -> SE \
actions)-> PSB propagation, however this will require an additional step in \
altering the PSB host IG locations created upon PP splitting. I argue that it \
is also possible to completely mix the order of PP splitting and SE actions \
and this will also create invariant results.\n\nTherefore the order of \
computation is as above and the order of SE action and PP splitting and PSB \
propagation does not matter so long as PSB propagation is not mixed (kept \
separate) with SE actions PP splitting.\n\nI will perform further proofs to \
justify these statements later."
}], "Text",
 CellChangeTimes->{
  3.8832234219623528`*^9},ExpressionUUID->"190c6019-56ce-42ef-a99a-\
dcc6df76f2c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining PSB data structure and propagation and test", "Subsection",
 CellChangeTimes->{{3.883055753268366*^9, 3.8830557658313503`*^9}, {
  3.8830558414444485`*^9, 
  3.883055844760868*^9}},ExpressionUUID->"7e2a8a60-0cbd-43be-a707-\
d9159b56b872"],

Cell["\<\
When a split occurs it needs to produce a PSB for each adjacent IG. This has \
been done previously.

Information for PSBs need to include IG symbol and number, and FROM PP set \
and FROM SE set.

In this example we have only one adjacent IG and so it has as it\
\[CloseCurlyQuote]s FROM set two PPs, PP1 and PP3. This will change as the \
PSB propagates through the system. It may be two SEs or it may be an SE and a \
PP, or it may be both PPs again. This is possible due to SE reduction.

IGs will need to store information anyway at some later date in order for \
information propagation so we might as well create an array for each IG that \
can store information regarding PSBs and propagating topological information. \
The numerical interpretations of the IG symbols could correspond to the \
addresses of the IG elements within the array. 

The use of PP and SE symbols in both IGs and PSBs elements should allow for \
changes in the adjacent sets of specific IGs to alter any corresponding \
symbols in PSB elements instantaneously and therefore not require computation \
to alter the symbolic values within the PSB elements.

 Let\[CloseCurlyQuote]s try this out...\
\>", "Text",
 CellChangeTimes->{{3.883055853324376*^9, 3.8830558802506266`*^9}, {
  3.8830562242967186`*^9, 3.883056665447858*^9}, {3.883056815379549*^9, 
  3.883056866861223*^9}, {3.8832224319308004`*^9, 3.88322320436823*^9}, {
  3.8832232520689363`*^9, 3.883223268539056*^9}, {3.883223428123829*^9, 
  3.8832234437297087`*^9}, {3.8833707159727077`*^9, 3.8833708409046907`*^9}, {
  3.8833708770331306`*^9, 3.8833709342163477`*^9}, {3.8833709740488653`*^9, 
  3.883370974178397*^9}},ExpressionUUID->"5e5c7278-6430-4e62-bd88-\
40b6c8b75675"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\"\<Chose the PSB to propagate\>\"", 
  ";"}], "\[IndentingNewLine]", "\"\<In our simplified example there is just \
one however we will be creating code that will be general.\>\"", "\n", 
 RowBox[{"\"\<Once we have code to implement effective PSB propagation we \
will demonstrate that the order of propagation does not effect the resultant \
\>\"", ";"}]}], "Input",
 CellChangeTimes->{{3.8833709674885006`*^9, 3.883371086850525*^9}},
 CellLabel->
  "In[1629]:=",ExpressionUUID->"3d7df171-519a-4191-9106-6acfa363ee54"],

Cell[BoxData["\<\"In our simplified example there is just one however we will \
be creating code that will be general.\"\>"], "Output",
 CellChangeTimes->{
  3.8833836723840427`*^9, {3.883383801933606*^9, 3.8833838164692163`*^9}, 
   3.8833840311141744`*^9, 3.883385437101609*^9, 3.8833862332341805`*^9, 
   3.883391433623568*^9, 3.8833915960151887`*^9, 3.8833980976844187`*^9, {
   3.883398135278924*^9, 3.8833981422757883`*^9}, 3.883400014826265*^9, 
   3.8834849544645343`*^9, 3.8834867834458017`*^9, 3.8834874545772305`*^9, 
   3.8834887490549436`*^9, 3.8834924031665535`*^9, 3.8834924849627457`*^9, 
   3.883492523903558*^9, {3.8834926263208475`*^9, 3.8834926354737606`*^9}},
 CellLabel->
  "Out[1630]=",ExpressionUUID->"95311dc1-49bb-4419-892f-c06f0d72b903"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Single IE PSB propagation", "Section",
 CellChangeTimes->{
  3.8833837951466923`*^9},ExpressionUUID->"fcf1145e-b364-4122-82f3-\
0f9faca3e2e5"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"\"\<Start with the chosen index\>\"", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PSBind", "=", "1"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"\"\<Find host IG of chosen PSB\>\"", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PSBloc", "=", 
     RowBox[{"PSBinSet", "[", 
      RowBox[{"[", "PSBind", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"PSBlocSym", "=", 
     RowBox[{"N2S", "[", "PSBloc", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
   "\"\<Now we need a general algorithm that is efficient that can propagate \
the PSB along all incident SE.\>\"", ";"}], "\[IndentingNewLine]", 
   RowBox[{
   "\"\<For each SE in the 'TO set' a new PSB will be created\>\"", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
   "\"\<Each new PSB that will be created will not move again in the same TS \
however it may need to be replicated if a PSB that has not propagated is on \
that specific IG\>\"", ";"}], "\[IndentingNewLine]", 
   RowBox[{
   "\"\<When A PSB propagates accross an SE it replicates its host IG in two, \
so any PSBs on there must be replicated.\>\"", ";"}], "\[IndentingNewLine]", 
   RowBox[{
   "\"\<Therefore there will be a set of replicated PSBs that have not \
propagated and therefore will need to propagate still that turn, and \
replicated PSBs that have propagated and will not need to propage again that \
turn but will be added to the set of PSBs.\>\"", ";"}]}]}]], "Input",
 CellChangeTimes->{{3.8833733935803766`*^9, 3.8833734915502105`*^9}, {
  3.8833735953543005`*^9, 3.883373936533577*^9}, {3.883373991861636*^9, 
  3.88337402452544*^9}, {3.883383601037563*^9, 3.88338364022499*^9}},
 CellLabel->
  "In[1632]:=",ExpressionUUID->"513098e7-f509-4160-8d18-a015319224cf"],

Cell[TextData[{
 StyleBox["Some further notes on PSB propagation data structure and \
efficiency:\n",
  FontWeight->"Bold"],
 "We start with a set of PSBs all stored on host IGs. \n\nPSBinSet\n\nThis \
will have a length, equal to PSBn giving the number of PSBs in the system.\n\n\
PSBs are stored in an array on their host IGs and store information of which \
elements they are propagating from.\n\nThe host IG may have an arbitrary \
number of adjacent SEs and PPs.\n\nWhen the PSB propagates it replicates its \
host IG and splits the connections of the two elements in the FROM sets. We \
can model this as such.\n\nOne IG remains and a new IG is created.\n\nThe \
remaining IG preserves all connections besides that of the element that is \
disconnected. This will need to be altered by dropping that element from all \
connections in that IG.\n\n",
 StyleBox["IG with multiple PSBs:\n",
  FontWeight->"Bold"],
 "When a PSB propagates it is dropped. Eg. (PSB1,PSB2,...,PSBN) -> \
(PSB2,...,PSBN) and (PSB2\[CloseCurlyQuote],...,PSBN\[CloseCurlyQuote]). This \
second array will be a new array of PSBs to still propagate.\n\nGeneral \
structure\nPP element = {Set of adjacent IGs} (non-directed hyperedge)\
\[LineSeparator]\nSE element = {Set of adjacent IGs (no more than two)} \
(non-directed edge)\nIG element = {{{Set of adjacent PP},{Set of adjacent \
SE}},{PSB set}} "
}], "Text",
 CellChangeTimes->{{3.8833740289989414`*^9, 3.883374371211382*^9}, {
  3.8833744089239597`*^9, 3.8833744137124786`*^9}, {3.8833744838567886`*^9, 
  3.8833744905306344`*^9}, {3.883376822534232*^9, 3.8833769137821927`*^9}, {
  3.883377794703226*^9, 3.8833778488360868`*^9}, {3.8833779991204453`*^9, 
  3.883378021530365*^9}, {3.8833780713155966`*^9, 3.883378072364189*^9}, {
  3.883378450801523*^9, 
  3.8833784511176353`*^9}},ExpressionUUID->"94c54f87-f041-42b0-b2db-\
0fa4aefeb0a2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"PSBnewProp", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PSBnew", "=", 
    RowBox[{"{", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "\"\<Ok let's just try and run a simple system first. Let's just make the \
damn PSB propagate and we can work out the other details bit by bit as we go \
rather than trying to imagine it all at once.\>\"", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", "\"\<PSB PROPAGATION:\>\"", \
"\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\"\<PSBloc gives us the PSB location\>\"", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Save PSB\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{"PSB", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"IGset", "[", 
     RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Delete from IG\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IGset", "[", 
    RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], "=", 
  RowBox[{"Drop", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IGset", "[", 
      RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], ",", "1"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"IGset", "[", 
  RowBox[{"[", "PSBloc", "]"}], "]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8833767916495037`*^9, 3.8833768189185505`*^9}, {
  3.8833780759621286`*^9, 3.8833782258165245`*^9}, {3.883378467621166*^9, 
  3.8833786119633284`*^9}, {3.883378667401164*^9, 3.8833787340063767`*^9}},
 CellLabel->
  "In[1642]:=",ExpressionUUID->"75efb535-8c1f-4039-92e6-ad1ef6392cb1"],

Cell[BoxData["\<\"PSB PROPAGATION:\"\>"], "Output",
 CellChangeTimes->{
  3.8833785143606014`*^9, {3.883378577533851*^9, 3.8833786338721895`*^9}, {
   3.8833786874562902`*^9, 3.8833787137418847`*^9}, 3.8833836724290423`*^9, 
   3.8833838064591455`*^9, 3.8833840375599184`*^9, 3.883385441765273*^9, 
   3.88338623613356*^9, 3.883391499149377*^9, 3.88339160657512*^9, 
   3.8833981053000145`*^9, 3.883398148011668*^9, 3.8834000149813194`*^9, 
   3.8834849068513346`*^9, 3.8834849545574183`*^9, 3.883486783644685*^9, 
   3.883487454859023*^9, 3.88348874913091*^9, {3.8834887911720476`*^9, 
   3.883488802718937*^9}, 3.883492403251774*^9, 3.883492485188544*^9, 
   3.8834925240886884`*^9, {3.8834926268824778`*^9, 3.8834926357155466`*^9}},
 CellLabel->
  "Out[1645]=",ExpressionUUID->"6db109ea-67eb-4375-b67a-5524ae2609d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "p1", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "p3", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8833785143606014`*^9, {3.883378577533851*^9, 3.8833786338721895`*^9}, {
   3.8833786874562902`*^9, 3.8833787137418847`*^9}, 3.8833836724290423`*^9, 
   3.8833838064591455`*^9, 3.8833840375599184`*^9, 3.883385441765273*^9, 
   3.88338623613356*^9, 3.883391499149377*^9, 3.88339160657512*^9, 
   3.8833981053000145`*^9, 3.883398148011668*^9, 3.8834000149813194`*^9, 
   3.8834849068513346`*^9, 3.8834849545574183`*^9, 3.883486783644685*^9, 
   3.883487454859023*^9, 3.88348874913091*^9, {3.8834887911720476`*^9, 
   3.883488802718937*^9}, 3.883492403251774*^9, 3.883492485188544*^9, 
   3.8834925240886884`*^9, {3.8834926268824778`*^9, 3.8834926357205524`*^9}},
 CellLabel->
  "Out[1648]=",ExpressionUUID->"37e17688-0acb-45d6-b124-421e709294fe"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.8833785143606014`*^9, {3.883378577533851*^9, 3.8833786338721895`*^9}, {
   3.8833786874562902`*^9, 3.8833787137418847`*^9}, 3.8833836724290423`*^9, 
   3.8833838064591455`*^9, 3.8833840375599184`*^9, 3.883385441765273*^9, 
   3.88338623613356*^9, 3.883391499149377*^9, 3.88339160657512*^9, 
   3.8833981053000145`*^9, 3.883398148011668*^9, 3.8834000149813194`*^9, 
   3.8834849068513346`*^9, 3.8834849545574183`*^9, 3.883486783644685*^9, 
   3.883487454859023*^9, 3.88348874913091*^9, {3.8834887911720476`*^9, 
   3.883488802718937*^9}, 3.883492403251774*^9, 3.883492485188544*^9, 
   3.8834925240886884`*^9, {3.8834926268824778`*^9, 3.88349263572519*^9}},
 CellLabel->
  "Out[1650]=",ExpressionUUID->"bf6c78b4-66a7-4f89-b285-67a783ceef47"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "p1", "}"}], ",", 
     RowBox[{"{", "s1", "}"}]}], "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8833785143606014`*^9, {3.883378577533851*^9, 3.8833786338721895`*^9}, {
   3.8833786874562902`*^9, 3.8833787137418847`*^9}, 3.8833836724290423`*^9, 
   3.8833838064591455`*^9, 3.8833840375599184`*^9, 3.883385441765273*^9, 
   3.88338623613356*^9, 3.883391499149377*^9, 3.88339160657512*^9, 
   3.8833981053000145`*^9, 3.883398148011668*^9, 3.8834000149813194`*^9, 
   3.8834849068513346`*^9, 3.8834849545574183`*^9, 3.883486783644685*^9, 
   3.883487454859023*^9, 3.88348874913091*^9, {3.8834887911720476`*^9, 
   3.883488802718937*^9}, 3.883492403251774*^9, 3.883492485188544*^9, 
   3.8834925240886884`*^9, {3.8834926268824778`*^9, 3.8834926357301493`*^9}},
 CellLabel->
  "Out[1651]=",ExpressionUUID->"e3f0c38d-37fd-4d4f-bd50-8f0524c2535b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{
   RowBox[{"Transpose", "[", "PSB", "]"}], "[", 
   RowBox[{"[", "2", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.883397773327388*^9, 3.8833977937035704`*^9}},
 CellLabel->
  "In[1652]:=",ExpressionUUID->"16cefa3d-535f-44ce-8ecb-0799aa15fcad"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.8833977710717535`*^9, 3.883397794052108*^9}, 
   3.8833981055757046`*^9, 3.8833981481037693`*^9, 3.8834000151249475`*^9, 
   3.8834849071443524`*^9, 3.8834849547054777`*^9, 3.88348678374664*^9, 
   3.8834874549772186`*^9, 3.883488749180151*^9, {3.883488791219247*^9, 
   3.8834888028279767`*^9}, 3.883492403303334*^9, 3.8834924853768682`*^9, 
   3.8834925243230176`*^9, {3.8834926271420236`*^9, 3.8834926358383074`*^9}},
 CellLabel->
  "Out[1652]=",ExpressionUUID->"7d9f1170-36bb-456d-b17b-f8804116b67f"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "\"\<We need to create a new IG with new SE connections. If there are no \
SEs in the PSB FROM SE set then all incident SEs will need to be cloned and \
the two FROM sets will partition on each now IG\>\"", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Define FROM SE\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"PSBseFROM", "=", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", "PSB", "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<We then extract the index set of SE adjacent to IG that the PSB \
will propagate along.\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEadj", "=", 
   RowBox[{"DeleteSubset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"IGset", "[", 
        RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", "PSBseFROM"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SEadjN", "=", 
    RowBox[{"Length", "[", "SEadj", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Extract out adjacent SE set from indices stored on IG\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SEadjSet", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"SEset", "[", 
       RowBox[{"[", 
        RowBox[{"S2N", "[", 
         RowBox[{"SEadj", "[", 
          RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i1", ",", "SEadjN"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Extract out IG prop set. This is the set that the PSB will \
replicate on.\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IGindPropSet1", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"SEadjSet", "[", 
          RowBox[{"[", "i1", "]"}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "==", "PSBlocSym"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"SEadjSet", "[", 
          RowBox[{"[", "i1", "]"}], "]"}], ",", "1"}], "]"}], ",", 
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"SEadjSet", "[", 
          RowBox[{"[", "i1", "]"}], "]"}], ",", "2"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i1", ",", "SEadjN"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IGindPropSet", "=", 
    RowBox[{"Map", "[", 
     RowBox[{"S2N", ",", 
      RowBox[{"Flatten", "[", "IGindPropSet1", "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Use IG prop set to generate a set of new SEs and the new SE \
index set.\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"newSEset", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Append", "[", 
      RowBox[{
       RowBox[{"IGindPropSet1", "[", 
        RowBox[{"[", "i1", "]"}], "]"}], ",", 
       RowBox[{"N2S", "[", "IGin", "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i1", ",", "SEadjN"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEin1", "=", 
   RowBox[{"SEin", "-", "1"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"newSEinSet", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"N2SSE", "[", 
       RowBox[{"SEin", "+", "i1"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i1", ",", "SEadjN"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<It is important to find a way to efficiently check if there are \
other PSBs on the IG propagated onto and see if the adjacent SE is contained \
in one of the FROM groups of that PSB. If so, then the new SE will need to be \
appended to the FROM set.\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<This algorithm may take some time since it needs to run through \
each PSB however so long as the number of PSB is not too dense it should not \
cause too much of a problem.\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Do", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{
          RowBox[{"IGset", "[", 
           RowBox[{"[", 
            RowBox[{"IGindPropSet", "[", 
             RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], ">", "0"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"PSBlocN", "=", 
         RowBox[{"Length", "[", 
          RowBox[{
           RowBox[{"IGset", "[", 
            RowBox[{"[", 
             RowBox[{"IGindPropSet", "[", 
              RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Do", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"IGset", "[", 
                   RowBox[{"[", 
                    RowBox[{"IGindPropSet", "[", 
                    RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "[", 
                 RowBox[{"[", "i2", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", 
              RowBox[{"SEadj", "[", 
               RowBox[{"[", "i1", "]"}], "]"}]}], "]"}], ",", 
            RowBox[{"AppendTo", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"IGset", "[", 
                   RowBox[{"[", 
                    RowBox[{"IGindPropSet", "[", 
                    RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "[", 
                 RowBox[{"[", "i2", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "[", 
               RowBox[{"[", "2", "]"}], "]"}], ",", 
              RowBox[{"newSEinSet", "[", 
               RowBox[{"[", "i1", "]"}], "]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"MemberQ", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"IGset", "[", 
                    RowBox[{"[", 
                    RowBox[{"IGindPropSet", "[", 
                    RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "[", 
                  RowBox[{"[", "i2", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], ",", 
              RowBox[{"SEadj", "[", 
               RowBox[{"[", "i1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"IGset", "[", 
                    RowBox[{"[", 
                    RowBox[{"IGindPropSet", "[", 
                    RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                   RowBox[{"[", "i2", "]"}], "]"}], "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", 
                RowBox[{"newSEinSet", "[", 
                 RowBox[{"[", "i1", "]"}], "]"}]}], "]"}]}], "]"}]}], "]"}], 
          "\[IndentingNewLine]", ",", 
          RowBox[{"{", 
           RowBox[{"i2", ",", "PSBlocN"}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"i1", ",", "SEadjN"}], "}"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "\"\<Create new IG with index IGin that shares all PP connections with IG \
PSBloc however has the new SE set\>\"", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<1. It is not important to update all connections within the new \
IG. So eg s1->s8 for example. We will create a table to represent the SE \
replacements that will need to take place. A replacement is needed since we \
wish to ahmend any possible other PSB connections that may be hosted on that \
PSB when we replicate the host IG.\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"seReplace", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"SEadj", "[", 
        RowBox[{"[", "i1", "]"}], "]"}], "\[Rule]", 
       RowBox[{"newSEinSet", "[", 
        RowBox[{"[", "i1", "]"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i1", ",", "SEadjN"}], "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<2. Use seReplace to replace all SE in new IG\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AppendTo", "[", 
    RowBox[{"IGset", ",", 
     RowBox[{"Replace", "[", 
      RowBox[{
       RowBox[{"IGset", "[", 
        RowBox[{"[", "PSBloc", "]"}], "]"}], ",", "seReplace", ",", "5"}], 
      "]"}]}], "]"}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<3. Disconnect FROM set 1 from new IG.\nNOTE: We do not extract \
PP FROM set from PSB. This may cause issues later down the line however it \
may not due to constraints on PSB propagation. We will consider this later \
once we have a running simulation.\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"IGset", "[", 
      RowBox[{"[", "IGin", "]"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "=", 
   RowBox[{"DeleteSubset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"IGset", "[", 
        RowBox[{"[", "IGin", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"PSB", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"IGset", "[", 
       RowBox[{"[", "IGin", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "=", 
    RowBox[{"DeleteSubset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"IGset", "[", 
         RowBox[{"[", "IGin", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}], ",", 
      RowBox[{
       RowBox[{"PSB", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<We need to alter the connections for all PPs and SEs in FROM \
set 1\>\"", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PPs1", "=", 
   RowBox[{
    RowBox[{"PSB", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "PPs1", "]"}], ">", "0"}], ",", 
    RowBox[{"Do", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"PPset", "[", 
        RowBox[{"[", 
         RowBox[{"S2N", "[", 
          RowBox[{"PPs1", "[", 
           RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "]"}], "=", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{
         RowBox[{"PPset", "[", 
          RowBox[{"[", 
           RowBox[{"S2N", "[", 
            RowBox[{"PPs1", "[", 
             RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"PSBlocSym", "\[Rule]", 
           RowBox[{"N2S", "[", "IGin", "]"}]}], "}"}]}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"i1", ",", 
        RowBox[{"Length", "[", "PPs1", "]"}]}], "}"}]}], "]"}]}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEs1", "=", 
   RowBox[{
    RowBox[{"PSB", "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "SEs1", "]"}], ">", "0"}], ",", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"SEset", "[", 
         RowBox[{"[", 
          RowBox[{"S2N", "[", 
           RowBox[{"SEs1", "[", 
            RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "]"}], "=", 
        RowBox[{"ReplaceAll", "[", 
         RowBox[{
          RowBox[{"SEset", "[", 
           RowBox[{"[", 
            RowBox[{"S2N", "[", 
             RowBox[{"SEs1", "[", 
              RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"PSBlocSym", "\[Rule]", 
            RowBox[{"N2S", "[", "IGin", "]"}]}], "}"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i1", ",", 
         RowBox[{"Length", "[", "SEs1", "]"}]}], "}"}]}], "]"}]}], "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<4. Disconnect FROM set 2 from old IG.\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"IGset", "[", 
      RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
     RowBox[{"[", "1", "]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}], "=", 
   RowBox[{"DeleteSubset", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"IGset", "[", 
        RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], ",", 
     RowBox[{
      RowBox[{"PSB", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"IGset", "[", 
       RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
      RowBox[{"[", "1", "]"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "=", 
    RowBox[{"DeleteSubset", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"IGset", "[", 
         RowBox[{"[", "PSBloc", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}], ",", 
      RowBox[{
       RowBox[{"PSB", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "\"\<There is a need for a justification for not altering the PSB on the \
newly created IG due to the partitioning caused by the PSB\>\"", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<5. Since the PSB in the host IG have been replicated via the \
cloning of the host IG we will need to store the locations of the newly \
created PSBs so that they may still propagate this TS.\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"newPSBn", "=", 
   RowBox[{"Length", "[", 
    RowBox[{
     RowBox[{"IGset", "[", 
      RowBox[{"[", "IGin", "]"}], "]"}], "[", 
     RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Do", "[", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"PSBnewProp", ",", "IGin"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i1", ",", "newPSBn"}], "}"}]}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\"\<PSB replication.\>\"", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"IGset", "[", 
         RowBox[{"[", 
          RowBox[{"IGindPropSet", "[", 
           RowBox[{"[", "i1", "]"}], "]"}], "]"}], "]"}], "[", 
        RowBox[{"[", "3", "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"SEadj", "[", 
             RowBox[{"[", "i1", "]"}], "]"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"newSEinSet", "[", 
             RowBox[{"[", "i1", "]"}], "]"}], "}"}]}], "}"}]}], "}"}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"PSBnew", ",", 
       RowBox[{"IGindPropSet", "[", 
        RowBox[{"[", "i1", "]"}], "]"}]}], "]"}], ";"}], 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i1", ",", "SEadjN"}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<Connect newSEset with SEset newSEinSet with SEinSet\>\"", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEset", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"SEset", ",", "newSEset"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEinSet", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"SEinSet", ",", "newSEinSet"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SEin", "+=", "SEadjN"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SEn", "+=", "SEadjN"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.8833787421969943`*^9, 3.8833788087873125`*^9}, {
   3.883378848986841*^9, 3.883379003543205*^9}, {3.8833793278476605`*^9, 
   3.883379393209344*^9}, {3.8833795110703807`*^9, 3.8833795180465565`*^9}, 
   3.883381952015555*^9, {3.8833819951460695`*^9, 3.883382054208799*^9}, 
   3.883382150904091*^9, {3.883382597129178*^9, 3.8833826069164286`*^9}, {
   3.8833827934293*^9, 3.8833828458773966`*^9}, {3.88338287695885*^9, 
   3.8833829406750965`*^9}, {3.883383127517644*^9, 3.883383142300692*^9}, {
   3.8833832496658325`*^9, 3.883383266664543*^9}, {3.883383296851537*^9, 
   3.8833833596153507`*^9}, {3.8833833952393274`*^9, 3.883383486709844*^9}, 
   3.883383630930254*^9, {3.8833840220094347`*^9, 3.883384023248351*^9}, {
   3.883384053351229*^9, 3.883384089859766*^9}, {3.883384124361758*^9, 
   3.883384127620003*^9}, {3.8833845198195505`*^9, 3.883384574541765*^9}, {
   3.8833846100463142`*^9, 3.88338467484542*^9}, {3.883384720259199*^9, 
   3.883384840791432*^9}, {3.8833848929574223`*^9, 3.883384986557782*^9}, {
   3.8833850340909357`*^9, 3.8833850416952367`*^9}, {3.883385112241004*^9, 
   3.8833851373444195`*^9}, {3.883385228216268*^9, 3.883385334784937*^9}, {
   3.8833854668860707`*^9, 3.8833854730655985`*^9}, {3.883385518020502*^9, 
   3.8833855399276724`*^9}, {3.8833860590570097`*^9, 
   3.8833863454578004`*^9}, {3.8833863991911573`*^9, 
   3.8833864739205804`*^9}, {3.883397731849139*^9, 3.883397749979303*^9}, {
   3.8833978052522774`*^9, 3.8833979485418367`*^9}, {3.883398568957964*^9, 
   3.8833990433206263`*^9}, {3.8833991213723*^9, 3.883399156284348*^9}, {
   3.8833992920836077`*^9, 3.8833992924185348`*^9}, {3.88339956665483*^9, 
   3.8834000014304843`*^9}, {3.8834000321519413`*^9, 
   3.8834000705382214`*^9}, {3.883400138454977*^9, 3.8834001524481497`*^9}, {
   3.883400185076314*^9, 3.883400435668254*^9}, {3.8834004709679775`*^9, 
   3.88340050160912*^9}, {3.883400533381466*^9, 3.883400644744899*^9}, {
   3.883400701071966*^9, 3.8834007489846916`*^9}, {3.8834008841430955`*^9, 
   3.8834011059814844`*^9}, {3.883401142057891*^9, 3.8834011444106607`*^9}, 
   3.8834849265482283`*^9, 3.8834849974525676`*^9, {3.8834851612617126`*^9, 
   3.8834851873797226`*^9}, {3.883485260745366*^9, 3.883485299304536*^9}, {
   3.8834853332612967`*^9, 3.883485360606465*^9}, {3.883485408676257*^9, 
   3.8834854187816467`*^9}, {3.883485503960024*^9, 3.8834855091628227`*^9}, {
   3.8834862984301147`*^9, 3.883486323152973*^9}, {3.883486431348133*^9, 
   3.8834864691658134`*^9}, {3.883486512854389*^9, 3.883486667906905*^9}, {
   3.883486700921459*^9, 3.8834867714063435`*^9}, {3.883486821145897*^9, 
   3.883486828973942*^9}, {3.8834871904610033`*^9, 3.8834873032100954`*^9}, {
   3.883487368414328*^9, 3.8834874257820864`*^9}, 3.883487487913412*^9, {
   3.8834876069222145`*^9, 3.8834876166849885`*^9}, {3.8834879179922295`*^9, 
   3.883487987657102*^9}, {3.8834880341714907`*^9, 3.883488149889571*^9}, {
   3.883488342894308*^9, 3.883488649211439*^9}, {3.883488680643403*^9, 
   3.883488712521228*^9}, 3.88348876291838*^9, {3.883489506987159*^9, 
   3.883489623720793*^9}, {3.883491121050254*^9, 3.8834912306204357`*^9}, {
   3.883491864410725*^9, 3.883492073698044*^9}, {3.8834921151726727`*^9, 
   3.8834923343880424`*^9}, {3.883492368328801*^9, 3.8834923973902826`*^9}, {
   3.8834924756991663`*^9, 3.8834924778259664`*^9}, {3.8834925086968985`*^9, 
   3.8834925191287556`*^9}, 3.8834926617586637`*^9, {3.8835455251825294`*^9, 
   3.883545525522585*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"2374b3e6-ca14-4ffe-8807-9bc773b1abbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<HypergraphPlot\>\"", "]"}], "[", 
  RowBox[{"mapS2N", "[", 
   RowBox[{"Join", "[", 
    RowBox[{"PPset", ",", "SEset"}], "]"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"766828e0-a1b6-4180-8074-ac1c9c93b0e8"],

Cell[BoxData[
 GraphicsBox[{{{
     {RGBColor[0.2522041818181818, 0.3444677272727273, 0.559693], Opacity[
      0.2], FilledCurveBox[
       BSplineCurve[{{1.7404537665034006`, 0.3511172981902483}, {
        1.1785038039715146`, 0.4079348408658063}, {0.5785038039715145, 
        0.4079348408658063}, {0.5785038039715145, -0.1920651591341937}, {
        1.6460245697599973`, -0.3}, {2.246024569759997, -0.3}, {
        3.1507492181854184`, 0.18975402977639583`}, {3.1507492181854184`, 
        0.7897540297763959}, {2.5507492181854188`, 0.7897540297763959}}, 
        SplineClosed -> True]]}, 
     {RGBColor[
      0.26246609090909095`, 0.40881836363636365`, 0.41640018181818184`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{10.46665360733856, 1.3501870633518678`}, {
        11.066653607338562`, 1.3501870633518678`}, {11.066653607338562`, 
        1.9501870633518679`}, {10.46665360733856, 1.9501870633518679`}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.2840933636363636, 0.4624029090909091, 0.3023625454545455], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.2690050446404742, 3.1144919577057}, {-0.3, 
        2.2224462339645035`}, {-0.3, 1.6224462339645034`}, {0.3, 
        1.6224462339645034`}, {0.8690050446404742, 2.5144919577057006`}, {
        1.8586772445325537`, 2.904851931011922}, {1.8586772445325537`, 
        3.5048519310119217`}, {1.2586772445325536`, 3.5048519310119217`}}, 
        SplineClosed -> True]]}, 
     {RGBColor[0.3709667272727272, 0.5269177272727272, 0.25258036363636366`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.8988487835979537`, 3.2667696225276828`}, {
        1.8586772445325537`, 3.5048519310119217`}, {1.2586772445325536`, 
        3.5048519310119217`}, {1.2586772445325536`, 2.904851931011922}, {
        2.298848783597954, 2.666769622527683}, {3.233732956522114, 
        2.1953257523884773`}, {3.8337329565221134`, 2.1953257523884773`}, {
        3.8337329565221134`, 2.795325752388477}}, SplineClosed -> True]]}, 
     {RGBColor[0.530106, 0.6196851818181818, 0.25407963636363634`], Opacity[
      0.2], 
      FilledCurveBox[
       BSplineCurve[{{4.821315567055078, 2.605355766847354}, {
        3.8337329565221134`, 2.795325752388477}, {3.233732956522114, 
        2.795325752388477}, {3.233732956522114, 2.1953257523884773`}, {
        4.221315567055078, 2.0053557668473543`}, {5.169099308648633, 
        1.8194224019302065`}, {5.769099308648633, 1.8194224019302065`}, {
        5.769099308648633, 2.4194224019302064`}}, SplineClosed -> True]]}, 
     {RGBColor[0.7103964545454545, 0.7155701818181818, 0.28209690909090906`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{6.681691456563498, 2.267844400718062}, {
        5.769099308648633, 2.4194224019302064`}, {5.169099308648633, 
        2.4194224019302064`}, {5.169099308648633, 1.8194224019302065`}, {
        6.081691456563498, 1.6678444007180622`}, {6.948071595532967, 
        1.5970998309632225`}, {7.548071595532966, 1.5970998309632225`}, {
        7.548071595532966, 2.1970998309632224`}}, SplineClosed -> True]]}, 
     {RGBColor[0.8366119090909091, 0.7534749090909091, 0.3119809090909091], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{7.995830803286127, 2.1543326322585887`}, {
        7.548071595532966, 2.1970998309632224`}, {6.948071595532967, 
        2.1970998309632224`}, {6.948071595532967, 1.5970998309632225`}, {
        7.812611105449329, 1.5145243476043573`}, {8.41261110544933, 
        1.5145243476043573`}, {9.314419704864664, 1.7104608064398101`}, {
        9.314419704864664, 2.31046080643981}, {8.714419704864662, 
        2.31046080643981}}, SplineClosed -> True]]}, 
     {RGBColor[0.8601291818181818, 0.6731310909090908, 0.32050409090909093`], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{10.168639511198682`, 1.9598037731712237`}, {
        9.314419704864664, 2.31046080643981}, {8.714419704864662, 
        2.31046080643981}, {8.714419704864662, 1.7104608064398101`}, {
        9.56863951119868, 1.3598037731712236`}, {10.46665360733856, 
        1.3501870633518678`}, {11.066653607338562`, 1.3501870633518678`}, {
        11.066653607338562`, 1.9501870633518679`}}, SplineClosed -> True]]}, 
     {RGBColor[0.7977275454545454, 0.4679130909090909, 0.2902775454545454], 
      Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{0.4436650251544158, 1.172531532095086}, {0.3, 
        2.2224462339645035`}, {-0.3, 2.2224462339645035`}, {-0.3, 
        1.6224462339645034`}, {-0.15633497484558417`, 0.5725315320950859}, {
        0.5785038039715145, -0.1920651591341937}, {
        1.1785038039715146`, -0.1920651591341937}, {1.1785038039715146`, 
        0.4079348408658063}}, SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{2.99577823788519, 1.7384814579642913`}, {
        2.5507492181854188`, 0.7897540297763959}, {2.5507492181854188`, 
        0.18975402977639583`}, {3.1507492181854184`, 0.18975402977639583`}, {
        3.5957782378851895`, 1.1384814579642912`}, {3.8337329565221134`, 
        2.1953257523884773`}, {3.8337329565221134`, 2.795325752388477}, {
        3.233732956522114, 2.795325752388477}}, SplineClosed -> True]]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Opacity[0.2], 
      FilledCurveBox[
       BSplineCurve[{{4.023179258057378, 3.2446032129601425`}, {
        4.194440384476296, 4.245946130887806}, {4.194440384476296, 
        4.845946130887806}, {3.594440384476296, 4.845946130887806}, {
        3.423179258057378, 3.844603212960142}, {3.233732956522114, 
        2.795325752388477}, {3.233732956522114, 2.1953257523884773`}, {
        3.8337329565221134`, 2.1953257523884773`}}, SplineClosed -> True]]}}, {
     {RGBColor[0.2522041818181818, 0.3444677272727273, 0.559693], Thickness[
      0.01], BSplineCurveBox[{{2.8507492181854186`, 0.4897540297763958}, {
       1.9460245697599974`, 0.}, {0.8785038039715145, 0.10793484086580629`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[
      0.26246609090909095`, 0.40881836363636365`, 0.41640018181818184`], 
      Thickness[0.01]}, 
     {RGBColor[0.2840933636363636, 0.4624029090909091, 0.3023625454545455], 
      Thickness[0.01], 
      BSplineCurveBox[{{1.5586772445325536`, 3.204851931011922}, {
       0.5690050446404742, 2.8144919577057004`}, {0., 1.9224462339645034`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.3709667272727272, 0.5269177272727272, 0.25258036363636366`], 
      Thickness[0.01], 
      BSplineCurveBox[{{1.5586772445325536`, 3.204851931011922}, {
       2.598848783597954, 2.966769622527683}, {3.5337329565221136`, 
       2.495325752388477}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.530106, 0.6196851818181818, 0.25407963636363634`], Thickness[
      0.01], BSplineCurveBox[{{3.5337329565221136`, 2.495325752388477}, {
       4.521315567055078, 2.305355766847354}, {5.469099308648633, 
       2.1194224019302066`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.7103964545454545, 0.7155701818181818, 0.28209690909090906`], 
      Thickness[0.01], 
      BSplineCurveBox[{{5.469099308648633, 2.1194224019302066`}, {
       6.381691456563498, 1.9678444007180622`}, {7.248071595532966, 
       1.8970998309632225`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8366119090909091, 0.7534749090909091, 0.3119809090909091], 
      Thickness[0.01], 
      BSplineCurveBox[{{7.248071595532966, 1.8970998309632225`}, {
       8.112611105449329, 1.8145243476043573`}, {9.014419704864663, 
       2.01046080643981}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.8601291818181818, 0.6731310909090908, 0.32050409090909093`], 
      Thickness[0.01], 
      BSplineCurveBox[{{9.014419704864663, 2.01046080643981}, {
       9.868639511198682, 1.6598037731712236`}, {10.766653607338561`, 
       1.6501870633518678`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.7977275454545454, 0.4679130909090909, 0.2902775454545454], 
      Thickness[0.01], 
      BSplineCurveBox[{{0., 1.9224462339645034`}, {0.14366502515441582`, 
       0.8725315320950859}, {0.8785038039715145, 0.10793484086580629`}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{3.5337329565221136`, 2.495325752388477}, {
       3.2957782378851896`, 1.4384814579642913`}, {2.8507492181854186`, 
       0.4897540297763958}},
       SplineWeights->{1, 6, 1}]}, 
     {RGBColor[0.72987, 0.239399, 0.230961], Thickness[0.01], 
      BSplineCurveBox[{{3.5337329565221136`, 2.495325752388477}, {
       3.7231792580573777`, 3.5446032129601424`}, {3.894440384476296, 
       4.545946130887806}},
       SplineWeights->{1, 6, 1}]}}}, 
   NamespaceBox[{{}, 
     {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
      TagBox[{
        TagBox[DiskBox[{1.5586772445325536, 3.204851931011922}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$1"], 
        InsetBox["1", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$1", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$1"], 
      TagBox[{
        TagBox[DiskBox[{3.5337329565221136, 2.495325752388477}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$2"], 
        InsetBox["2", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$2", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$2"], 
      TagBox[{
        TagBox[DiskBox[{5.469099308648633, 2.1194224019302066}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$3"], 
        InsetBox["3", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$3", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$3"], 
      TagBox[{
        TagBox[DiskBox[{7.248071595532966, 1.8970998309632225}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$4"], 
        InsetBox["4", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$4", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$4"], 
      TagBox[{
        TagBox[DiskBox[{9.014419704864663, 2.01046080643981}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$5"], 
        InsetBox["5", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$5", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$5"], 
      TagBox[{
        TagBox[DiskBox[{10.766653607338561, 1.6501870633518678}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$6"], 
        InsetBox["6", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$6", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$6"], 
      TagBox[{
        TagBox[DiskBox[{0., 1.9224462339645034}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$7"], 
        InsetBox["7", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$7", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$7"], 
      TagBox[{
        TagBox[DiskBox[{0.8785038039715145, 0.10793484086580629}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$8"], 
        InsetBox["8", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$8", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$8"], 
      TagBox[{
        TagBox[DiskBox[{2.8507492181854186, 0.4897540297763958}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$9"], 
        InsetBox["9", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$9", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$9"], 
      TagBox[{
        TagBox[DiskBox[{3.894440384476296, 4.545946130887806}, 0.15],
         "DynamicName",
         BoxID -> "VertexID$10"], 
        InsetBox["10", 
         Offset[{2, 2}, DynamicLocation[
          "VertexID$10", Automatic, {Right, Top}]], ImageScaled[{0, 0}],
         BaseStyle->"Graphics"]},
       "DynamicName",
       BoxID -> "VertexLabelID$10"]}}]}]], "Output",
 CellChangeTimes->{
  3.8834887493709736`*^9, {3.8834887913610477`*^9, 3.8834888030011864`*^9}, 
   3.8834924035415735`*^9, 3.8834924859425063`*^9, 3.8834925247846174`*^9, {
   3.8834926274558887`*^9, 3.883492636186573*^9}, 3.8835455373927016`*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"ed26b88f-764e-46c7-9180-d78b43ca19f8"]
}, Open  ]],

Cell["PSB propagation as a single function.", "Text",
 CellChangeTimes->{{3.8834875344125657`*^9, 
  3.883487540654704*^9}},ExpressionUUID->"94a59d58-0627-499d-89af-\
b30e03f31329"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1141.2, 574.1999999999999},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.2 for Microsoft Windows (64-bit) (December 12, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"76a07884-ed02-4d06-98bf-5ef6dd36d972"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 186, 3, 97, "Title",ExpressionUUID->"ab71c4a3-5264-4dcc-aa3f-782ba7cd5ae9"],
Cell[CellGroupData[{
Cell[791, 29, 155, 3, 67, "Section",ExpressionUUID->"cf11b03f-8551-4834-bd56-d9346f29b234"],
Cell[949, 34, 1897, 47, 166, "Input",ExpressionUUID->"36c0fa1a-3c4b-49d9-a7fe-e49677f039ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2883, 86, 237, 4, 67, "Section",ExpressionUUID->"0da4eeb0-a597-44b4-840c-00800a9c2864"],
Cell[3123, 92, 361, 7, 35, "Text",ExpressionUUID->"c148d844-cde5-4ad6-ba9e-b10302b4c290"],
Cell[CellGroupData[{
Cell[3509, 103, 214, 4, 54, "Subsection",ExpressionUUID->"925356f3-acec-497f-934f-ec5924c6d55a"],
Cell[3726, 109, 852, 18, 242, "Text",ExpressionUUID->"529ec982-8de8-41c7-ba13-dfad1abf47c0"],
Cell[CellGroupData[{
Cell[4603, 131, 7646, 175, 907, "Input",ExpressionUUID->"d533d13a-3ec1-499f-9ee4-c7fb2f3c9e13"],
Cell[12252, 308, 1815, 34, 32, "Output",ExpressionUUID->"2bd2399b-0af8-4c26-a8c3-576314fe75e6"],
Cell[14070, 344, 1562, 24, 32, "Output",ExpressionUUID->"13ef0469-bf88-414b-8b67-5d241f797513"],
Cell[15635, 370, 1582, 26, 32, "Output",ExpressionUUID->"f181ae65-2298-420c-a7dd-19fff0bf9255"],
Cell[17220, 398, 1532, 24, 32, "Output",ExpressionUUID->"b27905d8-5056-4921-8436-6ed09c6aa805"],
Cell[18755, 424, 1532, 22, 32, "Output",ExpressionUUID->"545a56e9-095b-4331-8b67-da8a78f996ae"],
Cell[20290, 448, 2940, 76, 53, "Output",ExpressionUUID->"5cdf8210-4e9a-42f3-a33b-b9aa39163e05"],
Cell[23233, 526, 1526, 22, 32, "Output",ExpressionUUID->"e94b2515-3ac8-4090-8f14-9ca880e0728f"]
}, Open  ]],
Cell[24774, 551, 178, 3, 28, "Input",ExpressionUUID->"04a56e90-8c3e-4ff2-b914-85349b575363"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24989, 559, 171, 3, 54, "Subsection",ExpressionUUID->"dee3620d-046f-4d29-aeec-ccab23562309"],
Cell[CellGroupData[{
Cell[25185, 566, 566, 12, 49, "Input",ExpressionUUID->"6117a4ce-e993-424d-8484-63a81dce4188"],
Cell[25754, 580, 1223, 25, 32, "Output",ExpressionUUID->"2b29c4c1-bdd2-4540-96ce-253145ab4795"],
Cell[26980, 607, 7066, 144, 84, "Output",ExpressionUUID->"f0cb08d2-d84b-4711-84be-2312e599a3a8"]
}, Open  ]],
Cell[34061, 754, 155, 3, 35, "Text",ExpressionUUID->"13dd0558-13bd-472c-b0f9-d49e73b6cc72"],
Cell[CellGroupData[{
Cell[34241, 761, 497, 12, 49, "Input",ExpressionUUID->"86a85f89-ae12-4618-b595-732757f42264"],
Cell[34741, 775, 1116, 25, 32, "Output",ExpressionUUID->"191ba700-6848-470b-ab30-15b49ebca3cf"],
Cell[35860, 802, 9127, 181, 160, "Output",ExpressionUUID->"807a5ce7-e3e2-4fc2-9521-624a8cb82d1c"]
}, Open  ]],
Cell[45002, 986, 410, 8, 58, "Text",ExpressionUUID->"19d5f2ee-741d-4b3f-8dbb-c1ffe0ad4be8"],
Cell[45415, 996, 178, 3, 28, "Input",ExpressionUUID->"26881c1b-0fa4-46ff-aec5-6e5fe5da4a7b"],
Cell[45596, 1001, 339, 7, 58, "Text",ExpressionUUID->"f454622b-980b-4b56-beb6-974a98628bf7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45972, 1013, 181, 3, 54, "Subsection",ExpressionUUID->"b185cca0-0a58-4e49-9fe4-1ec669d6844f"],
Cell[46156, 1018, 1881, 38, 449, "Text",ExpressionUUID->"d5e50ad8-4254-4ce7-8527-bfd3f62422c8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48074, 1061, 158, 3, 54, "Subsection",ExpressionUUID->"b9cfcc5b-fbc0-41ec-9e28-7b513a3524a6"],
Cell[CellGroupData[{
Cell[48257, 1068, 115, 2, 28, "Input",ExpressionUUID->"0ac660af-99ed-4ff6-8a9f-6a0afa9ce269"],
Cell[48375, 1072, 799, 15, 32, "Output",ExpressionUUID->"5c15e405-f293-4733-81c5-3d3a6546d6aa"]
}, Open  ]],
Cell[49189, 1090, 1052, 18, 219, "Text",ExpressionUUID->"a7df3718-f354-472f-bcaf-d9a35ebac300"],
Cell[CellGroupData[{
Cell[50266, 1112, 53505, 888, 388, "Input",ExpressionUUID->"487a900a-f529-43c9-8031-0b817dc599d5"],
Cell[103774, 2002, 53835, 893, 392, "Output",ExpressionUUID->"dfee5166-c85b-42e8-8125-21615bf87079"]
}, Open  ]],
Cell[157624, 2898, 5171, 125, 595, "Input",ExpressionUUID->"fd2f3405-64e7-45ec-a567-26200653278b"],
Cell[CellGroupData[{
Cell[162820, 3027, 185, 3, 28, "Input",ExpressionUUID->"fd857bb2-eea2-4ac2-9a79-a0030193ca4b"],
Cell[163008, 3032, 2498, 77, 53, "Output",ExpressionUUID->"3c5b22d9-7947-4798-997f-8930c9afc071"]
}, Open  ]],
Cell[165521, 3112, 279, 6, 35, "Text",ExpressionUUID->"2735cc49-377f-4249-9970-2dcbf0afe558"],
Cell[CellGroupData[{
Cell[165825, 3122, 183, 3, 28, "Input",ExpressionUUID->"8fe0c1e5-484b-497f-8841-e5d3836ffb73"],
Cell[166011, 3127, 907, 18, 32, "Output",ExpressionUUID->"e03c42d5-f940-4fe4-b64b-8ac6372c5e59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166955, 3150, 445, 9, 28, "Input",ExpressionUUID->"38fe0ab1-d4bb-42f5-b816-752e7b27b095"],
Cell[167403, 3161, 11207, 226, 101, "Output",ExpressionUUID->"74988ad3-2ae8-48e6-a41c-5a26b95ab6e6"]
}, Open  ]],
Cell[178625, 3390, 426, 8, 35, "Text",ExpressionUUID->"1f938717-d498-4cdd-a9d0-f62708b33cff"],
Cell[179054, 3400, 2424, 43, 613, "Text",ExpressionUUID->"190c6019-56ce-42ef-a99a-dcc6df76f2c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181515, 3448, 253, 4, 54, "Subsection",ExpressionUUID->"7e2a8a60-0cbd-43be-a707-d9159b56b872"],
Cell[181771, 3454, 1728, 32, 357, "Text",ExpressionUUID->"5e5c7278-6430-4e62-bd88-40b6c8b75675"],
Cell[CellGroupData[{
Cell[183524, 3490, 545, 9, 88, "Input",ExpressionUUID->"3d7df171-519a-4191-9106-6acfa363ee54"],
Cell[184072, 3501, 764, 11, 32, "Output",ExpressionUUID->"95311dc1-49bb-4419-892f-c06f0d72b903"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[184897, 3519, 148, 3, 67, "Section",ExpressionUUID->"fcf1145e-b364-4122-82f3-0f9faca3e2e5"],
Cell[185048, 3524, 1888, 39, 302, "Input",ExpressionUUID->"513098e7-f509-4160-8d18-a015319224cf"],
Cell[186939, 3565, 1873, 31, 633, "Text",ExpressionUUID->"94c54f87-f041-42b0-b2db-0fa4aefeb0a2"],
Cell[CellGroupData[{
Cell[188837, 3600, 1807, 46, 302, "Input",ExpressionUUID->"75efb535-8c1f-4039-92e6-ad1ef6392cb1"],
Cell[190647, 3648, 819, 12, 32, "Output",ExpressionUUID->"6db109ea-67eb-4375-b67a-5524ae2609d8"],
Cell[191469, 3662, 1035, 22, 32, "Output",ExpressionUUID->"37e17688-0acb-45d6-b124-421e709294fe"],
Cell[192507, 3686, 810, 13, 32, "Output",ExpressionUUID->"bf6c78b4-66a7-4f89-b285-67a783ceef47"],
Cell[193320, 3701, 992, 20, 32, "Output",ExpressionUUID->"e3f0c38d-37fd-4d4f-bd50-8f0524c2535b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[194349, 3726, 303, 7, 28, "Input",ExpressionUUID->"16cefa3d-535f-44ce-8ecb-0799aa15fcad"],
Cell[194655, 3735, 572, 9, 32, "Output",ExpressionUUID->"7d9f1170-36bb-456d-b17b-f8804116b67f"]
}, Open  ]],
Cell[195242, 3747, 21643, 539, 1784, "Input",ExpressionUUID->"2374b3e6-ca14-4ffe-8807-9bc773b1abbb"],
Cell[CellGroupData[{
Cell[216910, 4290, 299, 7, 28, "Input",ExpressionUUID->"766828e0-a1b6-4180-8074-ac1c9c93b0e8"],
Cell[217212, 4299, 12944, 262, 188, "Output",ExpressionUUID->"ed26b88f-764e-46c7-9180-d78b43ca19f8"]
}, Open  ]],
Cell[230171, 4564, 181, 3, 35, "Text",ExpressionUUID->"94a59d58-0627-499d-89af-b30e03f31329"]
}, Open  ]]
}, Open  ]]
}
]
*)

